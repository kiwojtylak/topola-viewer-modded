{"version":3,"sources":["util/error.ts","util/gedcom_util.ts","datasource/data_source.ts","details/translated-tag.tsx","details/wrapped-image.tsx","details/multiline-text.tsx","details/event-extras.tsx","details/events.tsx","details/details.tsx","datasource/embedded.ts","util/error_i18n.ts","menu/menu_item.tsx","util/media.ts","menu/search_index.ts","menu/search.tsx","menu/upload_menu.tsx","menu/top_bar.tsx","menu/url_menu.tsx","config.tsx","chart.tsx","app.tsx","index.tsx","util/date_util.ts","datasource/load_data.ts"],"names":["TopolaError","code","message","args","Error","pointerToId","pointer","substring","length","idToIndiMap","data","map","Map","indis","forEach","indi","set","id","idToFamMap","fams","fam","prepareGedcom","entries","head","find","entry","tag","other","strcmp","a","b","sortChildren","gedcom","comparator","indiMap","indiId1","indiId2","indi1","get","indi2","compareDates","birth","birthDatesComparator","newFams","children","newChildren","sort","Object","assign","sortFamilyChildren","sortSpouses","famMap","famId1","famId2","fam1","fam2","marriage","marriageDatesComparator","newIndis","sortIndiSpouses","dereference","getterFunction","dereferenced","getData","result","tree","subentry","last","push","normalizeGedcom","IMAGE_EXTENSIONS","isImageFile","fileName","lowerName","toLowerCase","some","ext","endsWith","filterImages","images","newImages","image","filePath","url","replaceAll","match","has","title","startsWith","filterImage","convertGedcom","parseGedcom","json","gedcomEntriesToJson","chartData","getName","person","names","filter","subEntry","name","nameEntry","replace","getFileName","fileEntry","fileTitle","fileExtension","getImageFileEntry","objectEntry","DataSourceEnum","TAG_DESCRIPTIONS","TranslatedTag","props","normalizedTag","defaultMessage","WrappedImage","useState","imageOpen","setImageOpen","imageLoaded","setImageLoaded","imageFailed","setImageFailed","imageSrc","setImageSrc","className","onClick","onLoad","onError","e","currentTarget","alt","src","filename","centered","Placeholder","Image","square","Container","fluid","textAlign","Message","negative","compact","Header","Modal","basic","size","closeIcon","Icon","color","open","onClose","onOpen","Content","label","Label","attached","content","wrapped","MultilineText","lines","line","index","properties","target","eventSources","sources","intl","List","source","Item","verticalAlign","author","publicationInfo","sourceElement","join","Description","page","date","formatDateOrRange","EventExtras","useIntl","activeIndex","setActiveIndex","setIndi","handleTabOnClick","event","menuItemProps","undefined","panes","menuItem","Menu","fitted","Popup","position","trigger","circular","render","Tab","Pane","notes","note","flatMap","tab","renderActiveOnly","menu","tabular","borderless","PersonLink","location","useLocation","search","queryString","Meta","to","pathname","EVENT_TAGS","FAMILY_EVENT_TAGS","EventHeader","as","type","sub","getSpouse","familyEntry","spouseReference","familySubEntry","includes","eventPlace","place","eventImages","imageFileEntry","sourceEntryReference","sourceEntry","abbr","sourceData","resolveDate","getDate","eventNotes","toEvent","family","familyMarriageEvent","personLink","toFamilyEvents","toIndiEvent","Event","Events","events","eventEntry","event1","event2","EXCLUDED_TAGS","fileDetails","noteDetails","nameDetails","fullName","nameType","getDetails","tags","detailsFunction","element","hasData","getOtherDetails","dataDetails","getMultilineDetails","Details","entriesWithData","Group","divided","EmbeddedMessageType","EmbeddedDataSource","newSource","oldSource","resolve","reject","PARENT_READY","window","parent","postMessage","READY","GEDCOM","loadGedcom","Promise","addEventListener","onMessage","getI18nMessage","error","formatMessage","MenuType","AppMedia","createMedia","breakpoints","small","large","mediaStyles","createMediaStyle","Media","MediaContextProvider","MenuItem","newProps","menuType","Dropdown","require","lunr","normalize","input","toLocaleLowerCase","compare","score","naturalSort","ref","LunrSearchIndex","this","self","initMultiLingualLunrWithoutTrimmer","field","boost","firstName","lastName","spouseLastName","famId","husb","husbId","husband","getHusbandLastName","add","normalizedName","normalizedSpouseLastName","lunrInstance","languages","pipelineFunctions","searchPipelineFunctions","language","unshift","stopWordFilter","stemmer","wordCharacters","pipeline","reset","apply","searchPipeline","query","split","s","slice","getNameLine","trim","SearchBar","searchResults","setSearchResults","searchString","setSearchString","searchIndex","useRef","getDescriptionLine","birthDate","deathDate","death","debouncedHandleSearch","debounce","results","current","key","description","displaySearchResult","useEffect","initialize","buildSearchIndex","Search","onSearchChange","_","value","onResultSelect","onSelection","generation","noResultsMessage","placeholder","selectFirstResult","isImageFileName","lower","UploadMenu","history","useHistory","files","filesArray","Array","from","gedcomFile","file","loadFile","URL","createObjectURL","imageFileNames","keys","hash","md5","state","htmlFor","accept","multiple","onChange","ScreenSize","UrlMenu","dialogOpen","setDialogOpen","setUrl","inputRef","handleLoad","focus","Form","onSubmit","Input","values","link","href","Actions","Button","secondary","primary","TopBar","chartMenus","screenSize","showingChart","LARGE","eventHandlers","onDownloadPdf","onDownloadPng","onDownloadSvg","onCenterView","SMALL","Divider","fileMenus","standalone","greaterThanOrEqual","inverted","at","icon","ChartColors","Ids","Sex","DEFAULT_CONFIG","COLOR_BY_GENERATION","SHOW","sex","COLOR_ARG","NO_COLOR","COLOR_BY_SEX","COLOR_ARG_INVERSE","v","k","ID_ARG","HIDE","ID_ARG_INVERSE","SEX_ARG","SEX_ARG_INVERSE","argsToConfig","getParam","ConfigPanel","Field","Checkbox","radio","tagName","checked","config","ChartType","zoomed","select","node","scale","transform","offsetX","max","clientWidth","offsetY","clientHeight","attr","scrollLeft","x","scrollTop","y","scrolled","zoomTransform","call","zoom","translateTo","loadAsDataUrl","blob","reader","FileReader","readAsDataURL","onload","inlineImage","baseVal","fetch","response","console","warn","inlineImages","svg","getElementsByTagName","all","loadImage","drawImageOnCanvas","canvas","document","createElement","width","height","ctx","getContext","oldFill","fillStyle","fillRect","drawImage","canvasToBlob","toBlob","getStrippedSvg","getElementById","cloneNode","removeAttribute","setAttribute","String","Number","getAttribute","querySelector","getSvgContentsWithInlinedImages","XMLSerializer","serializeToString","contents","Blob","saveAs","drawOnCanvas","downloadPng","downloadPdf","jspdf","default","doc","orientation","unit","format","addImage","save","chartColors","TopolaChartColors","ChartWrapper","chart","animating","rerenderRequired","zoomBehavior","rerenderProps","rerenderResetPosition","factor","scaleBy","initialRender","resetPosition","freezeAnimation","innerHTML","createChart","chartType","HourglassChart","renderer","DetailedRenderer","svgSelector","indiCallback","info","colors","animate","updateSvgSize","locale","setData","chartInfo","startIndi","selection","baseGeneration","zoomOutFactor","min","extent","scaleExtent","translateExtent","on","scrollTopTween","i","interpolateNumber","t","scrollLeftTween","dx","origin","dy","svgTransition","transition","delay","duration","tween","animationPromise","then","renderChart","Chart","chartWrapper","prevProps","usePrevious","hideIds","hideSex","AppState","staticUrl","process","REACT_APP_STATIC_URL","ErrorMessage","ErrorPopup","Portal","onDismiss","getArguments","getParamFromSearch","view","chartTypes","Hourglass","embedded","sourceSpec","GEDCOM_URL","handleCors","UPLOADED","EMBEDDED","parsedGen","isNaN","showSidePanel","messages","de","messages_de","fr","messages_fr","it","messages_it","es","messages_es","pl","messages_pl","navigator","browser","detect","ReactDOM","component","INITIAL","setState","setSelection","setError","setShowSidePanel","setStandalone","setChartType","showErrorPopup","setShowErrorPopup","setSourceSpec","setFreezeAnimation","setConfig","toggleDetails","shouldHideIds","shouldHideSex","hideId","uploadedDataSource","UploadedDataSource","gedcomUrlDataSource","GedcomUrlDataSource","embeddedDataSource","isNewData","newSourceSpec","newSelection","spec","loadData","updateUrl","gen","displayErrorPopup","downloadSvg","onDismissErrorPopup","renderMainArea","SHOWING_CHART","LOADING_MORE","updatedSelection","getSelection","sidePanelTabs","c","configToArgs","Loader","active","ERROR","LOADING","rootElement","classList","remove","exact","path","DATE_QUALIFIERS","formatDate","hasDay","day","hasMonth","month","hasYear","year","text","dateObject","Date","toDateObject","formatOptions","qualifier","lowerCaseQualifier","formatDateQualifier","Intl","DateTimeFormat","dateElement","dateOrRange","dateRange","fromDate","toDate","translatedFromDate","translatedToDate","formatDateRage","compareTopolaDates","date1","date2","firstDateOrRange","secondDateOrRange","prepareData","cacheId","serializedData","JSON","stringify","sessionStorage","setItem","loadGedzip","AdmZip","Buffer","arrayBuffer","zip","getEntries","entryName","toString","loadFromUrl","cachedData","getItem","parse","driveUrlMatch1","driveUrlMatch2","urlToFetch","status","statusText"],"mappings":"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","file":"static/js/main.f4ce13cb.chunk.js","sourcesContent":["/** Error class adding an error code used for i18n. */\nexport class TopolaError extends Error {\n    constructor(\n        public readonly code: string,\n        message: string,\n        public readonly args: { [key: string]: string } = {},\n    ) {\n        super(message);\n    }\n}\n","import {GedcomEntry, parse as parseGedcom} from 'parse-gedcom';\nimport {TopolaError} from './error';\nimport {\n    gedcomEntriesToJson,\n    JsonGedcomData,\n    JsonIndi,\n    JsonFam,\n    JsonImage,\n} from 'topola';\nimport {compareDates} from './date_util';\n\nexport interface GedcomData {\n    /** The HEAD entry. */\n    head: GedcomEntry;\n    /** INDI entries mapped by id. */\n    indis: { [key: string]: GedcomEntry };\n    /** FAM entries mapped by id. */\n    fams: { [key: string]: GedcomEntry };\n    /** Other entries mapped by id, e.g. NOTE, SOUR. */\n    other: { [key: string]: GedcomEntry };\n}\n\nexport interface TopolaData {\n    chartData: JsonGedcomData;\n    gedcom: GedcomData;\n}\n\n/**\n * Returns the identifier extracted from a pointer string.\n * E.g. '@I123@' -> 'I123'\n */\nexport function pointerToId(pointer: string): string {\n    return pointer.substring(1, pointer.length - 1);\n}\n\nexport function idToIndiMap(data: JsonGedcomData): Map<string, JsonIndi> {\n    const map = new Map<string, JsonIndi>();\n    data.indis.forEach((indi) => {\n        map.set(indi.id, indi);\n    });\n    return map;\n}\n\nexport function idToFamMap(data: JsonGedcomData): Map<string, JsonFam> {\n    const map = new Map<string, JsonFam>();\n    data.fams.forEach((fam) => {\n        map.set(fam.id, fam);\n    });\n    return map;\n}\n\nfunction prepareGedcom(entries: GedcomEntry[]): GedcomData {\n    const head = entries.find((entry) => entry.tag === 'HEAD')!;\n    const indis: { [key: string]: GedcomEntry } = {};\n    const fams: { [key: string]: GedcomEntry } = {};\n    const other: { [key: string]: GedcomEntry } = {};\n    entries.forEach((entry) => {\n        if (entry.tag === 'INDI') {\n            indis[pointerToId(entry.pointer)] = entry;\n        } else if (entry.tag === 'FAM') {\n            fams[pointerToId(entry.pointer)] = entry;\n        } else if (entry.pointer) {\n            other[pointerToId(entry.pointer)] = entry;\n        }\n    });\n    return {head, indis, fams, other};\n}\n\nfunction strcmp(a: string, b: string) {\n    if (a < b) {\n        return -1;\n    }\n    if (a > b) {\n        return 1;\n    }\n    return 0;\n}\n\n/** Birthdate comparator for individuals. */\nfunction birthDatesComparator(gedcom: JsonGedcomData) {\n    const indiMap = idToIndiMap(gedcom);\n    return (indiId1: string, indiId2: string) => {\n        const indi1: JsonIndi | undefined = indiMap.get(indiId1);\n        const indi2: JsonIndi | undefined = indiMap.get(indiId2);\n        return (\n            compareDates(indi1 && indi1.birth, indi2 && indi2.birth) ||\n            strcmp(indiId1, indiId2)\n        );\n    };\n}\n\n/** Marriage date comparator for families. */\nfunction marriageDatesComparator(gedcom: JsonGedcomData) {\n    const famMap = idToFamMap(gedcom);\n    return (famId1: string, famId2: string) => {\n        const fam1: JsonFam | undefined = famMap.get(famId1);\n        const fam2: JsonFam | undefined = famMap.get(famId2);\n        return (\n            compareDates(fam1 && fam1.marriage, fam2 && fam2.marriage) ||\n            strcmp(famId1, famId2)\n        );\n    };\n}\n\n/**\n * Sorts children by birthdate in the given family.\n * Does not modify the input objects.\n */\nfunction sortFamilyChildren(\n    fam: JsonFam,\n    comparator: (id1: string, id2: string) => number,\n): JsonFam {\n    if (!fam.children) {\n        return fam;\n    }\n    const newChildren = fam.children.sort(comparator);\n    return Object.assign({}, fam, {children: newChildren});\n}\n\n/**\n * Sorts children by birthdate.\n * Does not modify the input object.\n */\nfunction sortChildren(gedcom: JsonGedcomData): JsonGedcomData {\n    const comparator = birthDatesComparator(gedcom);\n    const newFams = gedcom.fams.map((fam) => sortFamilyChildren(fam, comparator));\n    return Object.assign({}, gedcom, {fams: newFams});\n}\n\n/**\n * Sorts spouses by marriage date.\n * Does not modify the input objects.\n */\nfunction sortIndiSpouses(\n    indi: JsonIndi,\n    comparator: (id1: string, id2: string) => number,\n): JsonFam {\n    if (!indi.fams) {\n        return indi;\n    }\n    const newFams = indi.fams.sort(comparator);\n    return Object.assign({}, indi, {fams: newFams});\n}\n\nfunction sortSpouses(gedcom: JsonGedcomData): JsonGedcomData {\n    const comparator = marriageDatesComparator(gedcom);\n    const newIndis = gedcom.indis.map((indi) =>\n        sortIndiSpouses(indi, comparator),\n    );\n    return Object.assign({}, gedcom, {indis: newIndis});\n}\n\n/**\n * If the entry is a reference to a top-level entry, the referenced entry is returned.\n * Otherwise, returns the given entry unmodified.\n */\nexport function dereference(\n    entry: GedcomEntry,\n    gedcom: GedcomData,\n    getterFunction: (gedcom: GedcomData) => { [key: string]: GedcomEntry },\n) {\n    if (entry.data) {\n        const dereferenced = getterFunction(gedcom)[pointerToId(entry.data)];\n        if (dereferenced) {\n            return dereferenced;\n        }\n    }\n    return entry;\n}\n\n/**\n * Returns the data for the given GEDCOM entry as an array of lines.\n * Supports continuations with CONT and CONC.\n */\nexport function getData(entry: GedcomEntry) {\n    const result = [entry.data];\n    entry.tree.forEach((subentry) => {\n        if (subentry.tag === 'CONC' && subentry.data) {\n            const last = result.length - 1;\n            result[last] += subentry.data;\n        } else if (subentry.tag === 'CONT' && subentry.data) {\n            result.push(subentry.data);\n        }\n    });\n    return result;\n}\n\n/** Sorts children and spouses. */\nexport function normalizeGedcom(gedcom: JsonGedcomData): JsonGedcomData {\n    return sortSpouses(sortChildren(gedcom));\n}\n\nconst IMAGE_EXTENSIONS = ['.jpg', '.jpeg', '.png', '.gif'];\n\n/** Returns true if the given file name has a known image extension. */\nexport function isImageFile(fileName: string): boolean {\n    const lowerName = fileName.toLowerCase();\n    return IMAGE_EXTENSIONS.some((ext) => lowerName.endsWith(ext));\n}\n\n/**\n * Removes images that are not HTTP links or do not have known image extensions.\n * Does not modify the input object.\n */\nfunction filterImage(indi: JsonIndi, images: Map<string, string>): JsonIndi {\n    if (!indi.images || indi.images.length === 0) {\n        return indi;\n    }\n    const newImages: JsonImage[] = [];\n    indi.images.forEach((image) => {\n        const filePath = image.url.replaceAll('\\\\', '/');\n        const fileName = filePath.match(/[^/]*$/)![0];\n        // If the image file has been loaded into memory, use it.\n        if (images.has(filePath)) {\n            newImages.push({url: images.get(filePath)!, title: image.title});\n        } else if (images.has(fileName)) {\n            newImages.push({url: images.get(fileName)!, title: image.title});\n        } else if (image.url.startsWith('http') && isImageFile(image.url)) {\n            newImages.push(image);\n        }\n    });\n    return Object.assign({}, indi, {images: newImages});\n}\n\n/**\n * Removes images that are not HTTP links.\n * Does not modify the input object.\n */\nfunction filterImages(\n    gedcom: JsonGedcomData,\n    images: Map<string, string>,\n): JsonGedcomData {\n    const newIndis = gedcom.indis.map((indi) => filterImage(indi, images));\n    return Object.assign({}, gedcom, {indis: newIndis});\n}\n\n/**\n * Converts GEDCOM file into JSON data performing additional transformations:\n * - sort children by birthdate\n * - remove images that are not HTTP links and aren't mapped in `images`.\n *\n * @param gedcom\n * @param images Map from file name to image URL. This is used to pass in\n *   uploaded images.\n */\nexport function convertGedcom(\n    gedcom: string,\n    images: Map<string, string>,\n): TopolaData {\n    const entries = parseGedcom(gedcom);\n    const json = gedcomEntriesToJson(entries);\n    if (\n        !json ||\n        !json.indis ||\n        !json.indis.length ||\n        !json.fams ||\n        !json.fams.length\n    ) {\n        throw new TopolaError('GEDCOM_READ_FAILED', 'Failed to read GEDCOM file');\n    }\n    return {\n        chartData: filterImages(normalizeGedcom(json), images),\n        gedcom: prepareGedcom(entries),\n    };\n}\n\nexport function getName(person: GedcomEntry): string | undefined {\n    const names = person.tree.filter((subEntry) => subEntry.tag === 'NAME');\n    const notMarriedName = names.find(\n        (subEntry) =>\n            subEntry.tree.filter(\n                (nameEntry) => nameEntry.tag === 'TYPE' && nameEntry.data === 'married',\n            ).length === 0,\n    );\n    const name = notMarriedName || names[0];\n    return name?.data.replace(/\\//g, '');\n}\n\nexport function getFileName(fileEntry: GedcomEntry): string | undefined {\n    const fileTitle = fileEntry?.tree.find((entry) => entry.tag === 'TITL')?.data;\n    const fileExtension = fileEntry?.tree.find((entry) => entry.tag === 'FORM')?.data;\n    return fileTitle && fileExtension && fileTitle + '.' + fileExtension;\n}\n\nexport function getImageFileEntry(objectEntry: GedcomEntry): GedcomEntry | undefined {\n    return objectEntry.tree.find(\n        (entry) =>\n            entry.tag === 'FILE' &&\n            entry.data.startsWith('http') &&\n            isImageFile(entry.data),\n    );\n}\n","import {IndiInfo} from 'topola';\nimport {TopolaData} from '../util/gedcom_util';\n\n/** Supported data sources. */\nexport enum DataSourceEnum {\n    UPLOADED,\n    GEDCOM_URL,\n    EMBEDDED,\n}\n\n/** Source specification together with individual selection. */\nexport interface SourceSelection<SourceSpecT> {\n    spec: SourceSpecT;\n    selection?: IndiInfo;\n}\n\n/** Interface encapsulating functions specific for a data source. */\nexport interface DataSource<SourceSpecT> {\n    /**\n     * Returns true if the application is now loading a completely new data set\n     * and the existing one should be wiped.\n     */\n    isNewData(\n        newSource: SourceSelection<SourceSpecT>,\n        oldSource: SourceSelection<SourceSpecT>,\n        data?: TopolaData,\n    ): boolean;\n\n    /** Loads data from the data source. */\n    loadData(spec: SourceSelection<SourceSpecT>): Promise<TopolaData>;\n}\n","import {FormattedMessage} from 'react-intl';\n\nconst TAG_DESCRIPTIONS = new Map([\n    ['ADOP', 'Adoption'],\n    ['BAPM', 'Baptism'],\n    ['BIRT', 'Birth'],\n    ['BURI', 'Burial'],\n    ['CENS', 'Census'],\n    ['CHR', 'Christening'],\n    ['CREM', 'Cremation'],\n    ['DEAT', 'Death'],\n    ['EDUC', 'Education'],\n    ['EMAIL', 'E-mail'],\n    ['EMIG', 'Emigration'],\n    ['EVEN', 'Event'],\n    ['FACT', 'Fact'],\n    ['IMMI', 'Immigration'],\n    ['MARR', 'Marriage'],\n    ['MARS', 'Marriage settlement'],\n    ['ETHN', 'Ethnic'],\n    ['TRIB', 'Clan'],\n    ['LANG', 'Language'],\n    ['DIV', 'Divorce'],\n    ['MILT', 'Military services'],\n    ['NATU', 'Naturalization'],\n    ['OCCU', 'Occupation'],\n    ['TITL', 'Title'],\n    ['WWW', 'WWW'],\n    ['birth', 'Birth name'],\n    ['married', 'Married name'],\n    ['maiden', 'Maiden name'],\n    ['immigrant', 'Immigrant name'],\n    ['aka', 'Also known as'],\n]);\n\ninterface Props {\n    tag: string;\n}\n\nexport function TranslatedTag(props: Props) {\n    const normalizedTag = props.tag.replace(/_/g, '');\n    return (\n        <FormattedMessage\n            id={`gedcom.${normalizedTag}`}\n            defaultMessage={TAG_DESCRIPTIONS.get(normalizedTag) || normalizedTag}\n        />\n    );\n}\n","import {\n    Container,\n    Icon,\n    Image,\n    Label,\n    Message,\n    Modal,\n    Placeholder,\n} from 'semantic-ui-react';\nimport {SyntheticEvent, useState} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\ninterface Props {\n    url: string;\n    filename: string;\n    title?: string;\n}\n\nexport function WrappedImage(props: Props) {\n    const [imageOpen, setImageOpen] = useState(false);\n    const [imageLoaded, setImageLoaded] = useState(false);\n    const [imageFailed, setImageFailed] = useState(false);\n    const [imageSrc, setImageSrc] = useState('');\n\n    if (imageLoaded && imageSrc !== props.url) {\n        setImageLoaded(false);\n    }\n    return (\n        <>\n            <Image\n                className={imageLoaded ? 'loaded-image-thumbnail' : 'hidden-image'}\n                onClick={() => setImageOpen(true)}\n                onLoad={() => {\n                    setImageLoaded(true);\n                    setImageSrc(props.url);\n                    setImageFailed(false);\n                }}\n                onError={(e: SyntheticEvent<HTMLImageElement, Event>) => {\n                    setImageLoaded(true);\n                    setImageSrc(props.url);\n                    setImageFailed(true);\n                    e.currentTarget.alt = '';\n                }}\n                src={props.url}\n                alt={props.title || props.filename}\n                centered={true}\n            />\n            <Placeholder className={!imageLoaded ? 'image-placeholder' : 'hidden-image'}>\n                <Placeholder.Image square/>\n            </Placeholder>\n            {imageFailed && (\n                <Container fluid textAlign=\"center\">\n                    <Message negative compact>\n                        <Message.Header>\n                            <FormattedMessage\n                                id=\"error.failed_to_load_image\"\n                                defaultMessage={'Failed to load image file'}\n                            />\n                        </Message.Header>\n                    </Message>\n                </Container>\n            )}\n            <Modal\n                basic\n                size=\"large\"\n                closeIcon={<Icon name=\"close\" color=\"red\"/>}\n                open={imageOpen}\n                onClose={() => setImageOpen(false)}\n                onOpen={() => setImageOpen(true)}\n                centered={false}\n            >\n                <Modal.Header>{props.title}</Modal.Header>\n                <Modal.Content image>\n                    <Image\n                        className=\"modal-image\"\n                        src={props.url}\n                        alt={props.title || props.filename}\n                        label={<Label attached=\"bottom\" content={props.filename}/>}\n                        wrapped\n                    />\n                </Modal.Content>\n            </Modal>\n        </>\n    );\n}\n","import Linkify from 'react-linkify';\n\ninterface Props {\n    lines: (JSX.Element | string)[];\n}\n\nexport function MultilineText(props: Props) {\n    return (\n        <>\n            {props.lines.map((line, index) => (\n                <div key={index}>\n                    <Linkify properties={{target: '_blank'}}>{line}</Linkify>\n                    <br/>\n                </div>\n            ))}\n        </>\n    );\n}\n","import {FormattedMessage, IntlShape, useIntl} from 'react-intl';\nimport {\n    Icon,\n    Item,\n    List,\n    Menu,\n    MenuItemProps,\n    Popup,\n    Tab,\n} from 'semantic-ui-react';\nimport {useState} from 'react';\nimport {WrappedImage} from './wrapped-image';\nimport * as React from 'react';\nimport {MultilineText} from './multiline-text';\nimport {DateOrRange} from 'topola';\nimport {formatDateOrRange} from '../util/date_util';\nimport Linkify from 'react-linkify';\n\nexport interface Image {\n    url: string;\n    filename: string;\n    title?: string;\n}\n\nexport interface Source {\n    title?: string;\n    author?: string;\n    page?: string;\n    date?: DateOrRange;\n    publicationInfo?: string;\n}\n\ninterface Props {\n    images?: Image[];\n    notes?: string[][];\n    sources?: Source[];\n    indi: string;\n}\n\nfunction eventImages(images: Image[] | undefined) {\n    return (\n        !!images &&\n        images.map((image, index) => (\n            <List key={index}>\n                <List.Item>\n                    <WrappedImage\n                        url={image.url}\n                        filename={image.filename}\n                        title={image.title}\n                    />\n                </List.Item>\n            </List>\n        ))\n    );\n}\n\nfunction eventNotes(notes: string[][] | undefined) {\n    return (\n        !!notes?.length &&\n        notes.map((note, index) => (\n            <div key={index}>\n                <MultilineText\n                    lines={note.map((line, index) => (\n                        <i key={index}>{line}</i>\n                    ))}\n                />\n            </div>\n        ))\n    );\n}\n\nfunction eventSources(sources: Source[] | undefined, intl: IntlShape) {\n    return (\n        !!sources?.length && (\n            <List>\n                {sources.map((source, index) => (\n                    <List.Item key={index}>\n                        <List.Icon verticalAlign=\"middle\" name=\"circle\" size=\"tiny\"/>\n                        <List.Content>\n                            <List.Header>\n                                <Linkify properties={{target: '_blank'}}>\n                                    {[source.author, source.title, source.publicationInfo]\n                                        .filter((sourceElement) => sourceElement)\n                                        .join(', ')}\n                                </Linkify>\n                            </List.Header>\n                            <List.Description>\n                                <Linkify properties={{target: '_blank'}}>{source.page}</Linkify>\n                                {source.date\n                                    ? ' [' + formatDateOrRange(source.date, intl) + ']'\n                                    : null}\n                            </List.Description>\n                        </List.Content>\n                    </List.Item>\n                ))}\n            </List>\n        )\n    );\n}\n\nexport function EventExtras(props: Props) {\n    const intl = useIntl();\n    const [activeIndex, setActiveIndex] = useState(-1);\n    const [indi, setIndi] = useState('');\n\n    if (!indi || indi !== props.indi) {\n        setActiveIndex(-1);\n        setIndi(props.indi);\n    }\n\n    function handleTabOnClick(\n        event: React.MouseEvent<HTMLAnchorElement>,\n        menuItemProps: MenuItemProps,\n    ) {\n        menuItemProps.index !== undefined && activeIndex !== menuItemProps.index\n            ? setActiveIndex(menuItemProps.index)\n            : setActiveIndex(-1);\n    }\n\n    const imageTab = props.images?.length && {\n        menuItem: (\n            <Menu.Item fitted key=\"images\" onClick={handleTabOnClick}>\n                <Popup\n                    content={\n                        <FormattedMessage id=\"extras.images\" defaultMessage=\"Images\"/>\n                    }\n                    size=\"mini\"\n                    position=\"bottom center\"\n                    trigger={<Icon circular name=\"camera\"/>}\n                />\n            </Menu.Item>\n        ),\n        render: () => <Tab.Pane>{eventImages(props.images)}</Tab.Pane>,\n    };\n\n    const noteTab = props.notes?.length && {\n        menuItem: (\n            <Menu.Item fitted key=\"notes\" onClick={handleTabOnClick}>\n                <Popup\n                    content={\n                        <FormattedMessage id=\"extras.notes\" defaultMessage=\"Notes\"/>\n                    }\n                    size=\"mini\"\n                    position=\"bottom center\"\n                    trigger={<Icon circular name=\"sticky note outline\"/>}\n                />\n            </Menu.Item>\n        ),\n        render: () => <Tab.Pane>{eventNotes(props.notes)}</Tab.Pane>,\n    };\n\n    const sourceTab = props.sources?.length && {\n        menuItem: (\n            <Menu.Item fitted key=\"sources\" onClick={handleTabOnClick}>\n                <Popup\n                    content={\n                        <FormattedMessage id=\"extras.sources\" defaultMessage=\"Sources\"/>\n                    }\n                    size=\"mini\"\n                    position=\"bottom center\"\n                    trigger={<Icon circular name=\"quote right\"/>}\n                />\n            </Menu.Item>\n        ),\n        render: () => <Tab.Pane>{eventSources(props.sources, intl)}</Tab.Pane>,\n    };\n\n    const panes = [imageTab, noteTab, sourceTab].flatMap((tab) =>\n        tab ? [tab] : [],\n    );\n\n    if (panes.length) {\n        return (\n            <Item.Description>\n                <Tab\n                    className=\"event-extras\"\n                    activeIndex={activeIndex}\n                    renderActiveOnly={true}\n                    menu={{\n                        tabular: true,\n                        attached: true,\n                        compact: true,\n                        borderless: true,\n                    }}\n                    panes={panes}\n                />\n            </Item.Description>\n        );\n    }\n    return null;\n}\n","import * as queryString from 'query-string';\nimport flatMap from 'array.prototype.flatmap';\nimport {compareDates, formatDateOrRange} from '../util/date_util';\nimport {DateOrRange, getDate} from 'topola';\nimport {\n    dereference,\n    GedcomData,\n    getData,\n    getImageFileEntry,\n    getFileName,\n    getName,\n} from '../util/gedcom_util';\nimport {GedcomEntry} from 'parse-gedcom';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {Link, useLocation} from 'react-router-dom';\nimport {pointerToId} from '../util/gedcom_util';\nimport {TranslatedTag} from './translated-tag';\nimport {Header, Item} from 'semantic-ui-react';\nimport {EventExtras, Image, Source} from './event-extras';\n\nfunction PersonLink(props: { person: GedcomEntry }) {\n    const location = useLocation();\n    const name = getName(props.person);\n    const search = queryString.parse(location.search);\n    search['indi'] = pointerToId(props.person.pointer);\n    return (\n        <Item.Meta>\n            <Link to={{pathname: '/view', search: queryString.stringify(search)}}>\n                {name ? (name) : (<FormattedMessage id=\"name.unknown_name\" defaultMessage=\"N.N.\"/>)}\n            </Link>\n        </Item.Meta>\n    );\n}\n\ninterface Props {\n    gedcom: GedcomData;\n    indi: string;\n    entries: GedcomEntry[];\n}\n\ninterface EventData {\n    type: string;\n    date?: DateOrRange;\n    personLink?: GedcomEntry;\n    place?: string[];\n    images?: Image[];\n    notes?: string[][];\n    sources?: Source[];\n    indi: string;\n}\n\nconst EVENT_TAGS = [\n    'BIRT',\n    'BAPM',\n    'CHR',\n    'FAMS',\n    'EVEN',\n    'CENS',\n    'DEAT',\n    'BURI',\n];\n\nconst FAMILY_EVENT_TAGS = ['MARR', 'MARS', 'DIV'];\n\nfunction EventHeader(props: { event: EventData }) {\n    const intl = useIntl();\n    return (\n        <div className=\"event-header\">\n            <Header as=\"span\" size=\"small\">\n                <TranslatedTag tag={props.event.type}/>\n            </Header>\n            {props.event.date ? (\n                <Header as=\"span\" textAlign=\"right\" sub>\n                    {formatDateOrRange(props.event.date, intl)}\n                </Header>\n            ) : null}\n        </div>\n    );\n}\n\nfunction getSpouse(indi: string, familyEntry: GedcomEntry, gedcom: GedcomData) {\n    const spouseReference = familyEntry.tree\n        .filter((familySubEntry) => ['WIFE', 'HUSB'].includes(familySubEntry.tag))\n        .find((familySubEntry) => !familySubEntry.data.includes(indi));\n    if (!spouseReference) {\n        return undefined;\n    }\n    return dereference(spouseReference, gedcom, (gedcom) => gedcom.indis);\n}\n\nfunction eventPlace(entry: GedcomEntry) {\n    const place = entry.tree.find((subEntry) => subEntry.tag === 'PLAC');\n    return place?.data ? getData(place) : undefined;\n}\n\nfunction eventImages(entry: GedcomEntry, gedcom: GedcomData): Image[] {\n    return entry.tree\n        .filter((subEntry) => 'OBJE' === subEntry.tag)\n        .map((objectEntry) =>\n            dereference(objectEntry, gedcom, (gedcom) => gedcom.other),\n        )\n        .map((objectEntry) => getImageFileEntry(objectEntry))\n        .flatMap((imageFileEntry) =>\n            imageFileEntry ? [\n                    {\n                        url: imageFileEntry?.data || '',\n                        filename: getFileName(imageFileEntry) || '',\n                    },\n                ] : [],\n        );\n}\n\nfunction eventSources(entry: GedcomEntry, gedcom: GedcomData): Source[] {\n    return entry.tree\n        .filter((subEntry) => 'SOUR' === subEntry.tag)\n        .map((sourceEntryReference) => {\n            const sourceEntry = dereference(sourceEntryReference, gedcom, (gedcom) => gedcom.other);\n            const title = sourceEntry.tree.find((subEntry) => 'TITL' === subEntry.tag);\n            const abbr = sourceEntry.tree.find((subEntry) => 'ABBR' === subEntry.tag);\n            const author = sourceEntry.tree.find((subEntry) => 'AUTH' === subEntry.tag);\n            const publicationInfo = sourceEntry.tree.find((subEntry) => 'PUBL' === subEntry.tag);\n            const page = sourceEntryReference.tree.find((subEntry) => 'PAGE' === subEntry.tag);\n            const sourceData = sourceEntryReference.tree.find((subEntry) => 'DATA' === subEntry.tag);\n            const date = sourceData ? resolveDate(sourceData) : undefined;\n            return {\n                title: title?.data || abbr?.data,\n                author: author?.data,\n                page: page?.data,\n                date: date ? getDate(date.data) : undefined,\n                publicationInfo: publicationInfo?.data,\n            };\n        });\n}\n\nfunction eventNotes(entry: GedcomEntry, gedcom: GedcomData): string[][] {\n    return entry.tree\n        .filter((subentry) => ['NOTE', 'TYPE'].includes(subentry.tag))\n        .map((note) => dereference(note, gedcom, (gedcom) => gedcom.other))\n        .map((note) => getData(note));\n}\n\nfunction toEvent(\n    entry: GedcomEntry,\n    gedcom: GedcomData,\n    indi: string,\n): EventData[] {\n    return entry.tag === 'FAMS' ? toFamilyEvents(entry, gedcom, indi) : toIndiEvent(entry, gedcom, indi);\n}\n\nfunction toIndiEvent(\n    entry: GedcomEntry,\n    gedcom: GedcomData,\n    indi: string,\n): EventData[] {\n    const date = resolveDate(entry) || null;\n    return [\n        {\n            date: date ? getDate(date.data) : undefined,\n            type: entry.tag,\n            place: eventPlace(entry),\n            images: eventImages(entry, gedcom),\n            notes: eventNotes(entry, gedcom),\n            sources: eventSources(entry, gedcom),\n            indi: indi,\n        },\n    ];\n}\n\nfunction resolveDate(entry: GedcomEntry) {\n    return entry.tree.find((subEntry) => subEntry.tag === 'DATE');\n}\n\nfunction toFamilyEvents(\n    entry: GedcomEntry,\n    gedcom: GedcomData,\n    indi: string,\n): EventData[] {\n    const family = dereference(entry, gedcom, (gedcom) => gedcom.fams);\n    return flatMap(FAMILY_EVENT_TAGS, (tag) =>\n        family.tree.filter((entry) => entry.tag === tag),\n    ).map((familyMarriageEvent) => {\n        const date = resolveDate(familyMarriageEvent) || null;\n        return {\n            date: date ? getDate(date.data) : undefined,\n            type: familyMarriageEvent.tag,\n            personLink: getSpouse(indi, family, gedcom),\n            place: eventPlace(familyMarriageEvent),\n            images: eventImages(familyMarriageEvent, gedcom),\n            notes: eventNotes(familyMarriageEvent, gedcom),\n            sources: eventSources(familyMarriageEvent, gedcom),\n            indi: indi,\n        };\n    });\n}\n\nfunction Event(props: { event: EventData }) {\n    return (\n        <Item>\n            <Item.Content>\n                <EventHeader event={props.event}/>\n                {!!props.event.personLink && (<PersonLink person={props.event.personLink}/>)}\n                {!!props.event.place && (<Item.Description>{props.event.place}</Item.Description>)}\n                <EventExtras\n                    images={props.event.images}\n                    notes={props.event.notes}\n                    sources={props.event.sources}\n                    indi={props.event.indi}\n                />\n            </Item.Content>\n        </Item>\n    );\n}\n\nexport function Events(props: Props) {\n    const events = flatMap(EVENT_TAGS, (tag) =>\n        props.entries\n            .filter((entry) => entry.tag === tag)\n            .map((eventEntry) => toEvent(eventEntry, props.gedcom, props.indi))\n            .flatMap((events) => events)\n            .sort((event1, event2) => compareDates(event1.date, event2.date)),\n    );\n    if (events.length) {\n        return (\n            <>\n                {events.map((event, index) => (\n                    <Event event={event} key={index}/>\n                ))}\n            </>\n        );\n    }\n    return null;\n}\n","import flatMap from 'array.prototype.flatmap';\nimport {\n    dereference,\n    GedcomData,\n    getData,\n    getFileName,\n    getImageFileEntry\n} from '../util/gedcom_util';\nimport {Events} from './events';\nimport {GedcomEntry} from 'parse-gedcom';\nimport {MultilineText} from './multiline-text';\nimport {TranslatedTag} from './translated-tag';\nimport {Header, Item} from 'semantic-ui-react';\nimport {FormattedMessage} from 'react-intl';\nimport {WrappedImage} from './wrapped-image';\n\nconst EXCLUDED_TAGS = [\n    'BIRT',\n    'BAPM',\n    'CHR',\n    'EVEN',\n    'CENS',\n    'DEAT',\n    'BURI',\n    'NAME',\n    'SEX',\n    'FAMC',\n    'FAMS',\n    'NOTE',\n    'SOUR',\n    'LANG',\n];\n\nfunction dataDetails(entry: GedcomEntry) {\n    const lines = [];\n    if (entry.data) {\n        lines.push(...getData(entry));\n    }\n    entry.tree\n        .filter((subentry) => subentry.tag === 'NOTE')\n        .forEach((note) =>\n            getData(note).forEach((line) => lines.push(<i>{line}</i>)),\n        );\n    if (!lines.length) {\n        return null;\n    }\n    return (\n        <>\n            <Header sub>\n                <TranslatedTag tag={entry.tag}/>\n            </Header>\n            <span>\n                <MultilineText lines={lines}/>\n            </span>\n        </>\n    );\n}\n\nfunction fileDetails(objectEntry: GedcomEntry) {\n    const imageFileEntry = getImageFileEntry(objectEntry);\n    return imageFileEntry ? (\n        <div className=\"person-image\">\n            <WrappedImage\n                url={imageFileEntry.data}\n                filename={getFileName(imageFileEntry) || ''}\n            />\n        </div>\n    ) : null;\n}\n\nfunction noteDetails(entry: GedcomEntry) {\n    return (\n        <MultilineText\n            lines={getData(entry).map((line, index) => (\n                <i key={index}>{line}</i>\n            ))}\n        />\n    );\n}\n\nfunction nameDetails(entry: GedcomEntry) {\n    const fullName = entry.data.replaceAll('/', '');\n    const nameType = entry.tree.find(\n        (entry) => entry.tag === 'TYPE' && entry.data !== 'Unknown',\n    )?.data;\n    return (\n        <>\n            <Header as=\"span\" size=\"large\">\n                {fullName ? (\n                    fullName\n                ) : (\n                    <FormattedMessage id=\"name.unknown_name\" defaultMessage=\"N.N.\"/>\n                )}\n            </Header>\n            {fullName && nameType && (\n                <Item.Meta>\n                    <TranslatedTag tag={nameType}/>\n                </Item.Meta>\n            )}\n        </>\n    );\n}\n\nfunction getDetails(\n    entries: GedcomEntry[],\n    tags: string[],\n    detailsFunction: (entry: GedcomEntry) => JSX.Element | null,\n): JSX.Element[] {\n    return flatMap(tags, (tag) =>\n        entries\n            .filter((entry) => entry.tag === tag)\n            .map((entry) => detailsFunction(entry)),\n    )\n        .filter((element) => element !== null)\n        .map((element, index) => (\n            <Item key={index}>\n                <Item.Content>{element}</Item.Content>\n            </Item>\n        ));\n}\n\n/**\n * Returns true if there is displayable information in this entry.\n * Returns false if there is no data in this entry or this is only a reference\n * to another entry.\n */\nfunction hasData(entry: GedcomEntry) {\n    return entry.tree.length > 0 || (entry.data && !entry.data.startsWith('@'));\n}\n\nfunction getOtherDetails(entries: GedcomEntry[]) {\n    return entries\n        .filter((entry) => !EXCLUDED_TAGS.includes(entry.tag))\n        .filter(hasData)\n        .map((entry) => dataDetails(entry))\n        .filter((element) => element !== null)\n        .map((element, index) => (\n            <Item key={index}>\n                <Item.Content>{element}</Item.Content>\n            </Item>\n        ));\n}\n\nfunction getMultilineDetails(\n    entries: GedcomEntry[],\n    tags: string[],\n    title: [string, string],\n) {\n    const lines= entries\n        .filter((entry) => tags.includes(entry.tag))\n        .filter(hasData)\n        .map((element) => element.data)\n    if (!lines.length) {\n        return null;\n    }\n    return (\n        <Item key=\"languages\">\n            <Item.Content>\n                <Header as=\"span\">\n                    <FormattedMessage id={title[0]} defaultMessage={title[1]}/>\n                </Header>\n                <span>\n                    <MultilineText lines={lines}/>\n                </span>\n            </Item.Content>\n        </Item>\n    );\n}\n\ninterface Props {\n    gedcom: GedcomData;\n    indi: string;\n}\n\nexport function Details(props: Props) {\n    const entries = props.gedcom.indis[props.indi].tree;\n    const entriesWithData = entries\n        .map((entry) => dereference(entry, props.gedcom, (gedcom) => gedcom.other))\n        .filter(hasData);\n\n    return (\n        <div className=\"details\">\n            <Item.Group divided>\n                {getDetails(entries, ['NAME'], nameDetails)}\n                {getDetails(entriesWithData, ['OBJE'], fileDetails)}\n                <Events gedcom={props.gedcom} entries={entries} indi={props.indi}/>\n                {getMultilineDetails(entriesWithData, ['LANG'], ['gedcom.languages', 'Languages'])}\n                {getOtherDetails(entriesWithData)}\n                {getDetails(entriesWithData, ['NOTE'], noteDetails)}\n            </Item.Group>\n        </div>\n    );\n}\n","import {DataSource, DataSourceEnum, SourceSelection} from './data_source';\nimport {TopolaData} from '../util/gedcom_util';\nimport {loadGedcom} from './load_data';\n\n/**\n * Message types used in embedded mode.\n * When the parent is ready to receive messages, it sends PARENT_READY.\n * When the child (this app) is ready to receive messages, it sends READY.\n * When the child receives PARENT_READY, it sends READY.\n * When the parent receives READY, it sends data in a GEDCOM message.\n */\nenum EmbeddedMessageType {\n    GEDCOM = 'gedcom',\n    READY = 'ready',\n    PARENT_READY = 'parent_ready',\n}\n\n/** Message sent to parent or received from parent in embedded mode. */\ninterface EmbeddedMessage {\n    message: EmbeddedMessageType;\n}\n\ninterface GedcomMessage extends EmbeddedMessage {\n    message: EmbeddedMessageType.GEDCOM;\n    gedcom?: string;\n}\n\nexport interface EmbeddedSourceSpec {\n    source: DataSourceEnum.EMBEDDED;\n}\n\n/** GEDCOM file received from outside of the iframe. */\nexport class EmbeddedDataSource implements DataSource<EmbeddedSourceSpec> {\n    isNewData(\n        newSource: SourceSelection<EmbeddedSourceSpec>,\n        oldSource: SourceSelection<EmbeddedSourceSpec>,\n        data?: TopolaData,\n    ): boolean {\n        // Never reload data.\n        return false;\n    }\n\n    private async onMessage(\n        message: EmbeddedMessage,\n        resolve: (value: TopolaData) => void,\n        reject: (reason: any) => void,\n    ) {\n        if (message.message === EmbeddedMessageType.PARENT_READY) {\n            // Parent didn't receive the first 'ready' message, so we need to send it again.\n            window.parent.postMessage({message: EmbeddedMessageType.READY}, '*');\n        } else if (message.message === EmbeddedMessageType.GEDCOM) {\n            const gedcom = (message as GedcomMessage).gedcom;\n            if (!gedcom) {\n                return;\n            }\n            try {\n                const data = await loadGedcom('', gedcom);\n                resolve(data);\n            } catch (error) {\n                reject(error);\n            }\n        }\n    }\n\n    async loadData(source: SourceSelection<EmbeddedSourceSpec>): Promise<TopolaData> {\n        // Notify the parent window that we are ready.\n        return new Promise<TopolaData>((resolve, reject) => {\n            window.parent.postMessage({message: EmbeddedMessageType.READY}, '*');\n            window.addEventListener('message', (data) =>\n                this.onMessage(data.data, resolve, reject),\n            );\n        });\n    }\n}\n","import {IntlShape} from 'react-intl';\nimport {TopolaError} from './error';\n\n/**\n * Returns a translated message for the given error. If the message can't be\n * translated, the original error.message is returned.\n */\nexport function getI18nMessage(error: Error, intl: IntlShape): string {\n    if (!(error instanceof TopolaError)) {\n        return error.message;\n    }\n    return intl.formatMessage(\n        {\n            id: `error.${error.code}`,\n            defaultMessage: error.message,\n        },\n        error.args,\n    );\n}\n","import {\n    Menu,\n    Dropdown,\n    MenuItemProps,\n    DropdownItemProps,\n} from 'semantic-ui-react';\n\nexport enum MenuType {\n    Menu,\n    Dropdown,\n}\n\ninterface Props {\n    menuType?: MenuType;\n}\n\nexport function MenuItem(props: Props & MenuItemProps & DropdownItemProps) {\n    const newProps = {...props};\n    // Remove menuType from props to avoid error message in the console.\n    delete newProps.menuType;\n    return (\n        <>\n            {props.menuType === MenuType.Menu ? (\n                <Menu.Item {...newProps}>{props.children}</Menu.Item>\n            ) : (\n                <Dropdown.Item {...newProps}>{props.children}</Dropdown.Item>\n            )}\n        </>\n    );\n}\n","import {createMedia} from '@artsy/fresnel';\n\n/** Defines the breakpoints at which to show different UI variants.*/\nconst AppMedia = createMedia({\n    breakpoints: {\n        small: 320,\n        large: 768,\n    },\n});\nexport const mediaStyles = AppMedia.createMediaStyle();\nexport const {Media, MediaContextProvider} = AppMedia;\n","import lunr, {PipelineFunction} from 'lunr';\nimport naturalSort from 'javascript-natural-sort';\nimport {idToFamMap, idToIndiMap} from '../util/gedcom_util';\nimport {JsonFam, JsonGedcomData, JsonIndi} from 'topola';\n\nrequire('lunr-languages/lunr.stemmer.support')(lunr);\nrequire('lunr-languages/lunr.de')(lunr);\nrequire('lunr-languages/lunr.fr')(lunr);\nrequire('lunr-languages/lunr.it')(lunr);\nrequire('lunr-languages/lunr.ru')(lunr);\n\nconst MAX_RESULTS = 8;\n\nexport interface SearchResult {\n    id: string;\n    indi: JsonIndi;\n}\n\nexport interface SearchIndex {\n    search(input: string): SearchResult[];\n}\n\n/** Removes accents from letters, e.g. ó->o, ę->e. */\nfunction normalize(input: string) {\n    return input\n        .toLocaleLowerCase()\n        .normalize('NFD')\n        .replace(/[\\u0300-\\u036f]/g, '')\n        .replace(/\\u0142/g, 'l'); // Special case: ł is not affected by NFD.\n}\n\n/** Comparator to sort by score first, then by id. */\nfunction compare(a: lunr.Index.Result, b: lunr.Index.Result) {\n    if (a.score !== b.score) {\n        return b.score - a.score;\n    }\n    return naturalSort(a.ref, b.ref);\n}\n\n/** Returns all last names of all husbands as a space-separated string. */\nfunction getHusbandLastName(\n    indi: JsonIndi,\n    indiMap: Map<String, JsonIndi>,\n    famMap: Map<string, JsonFam>,\n): string {\n    return (indi.fams || [])\n        .map((famId) => famMap.get(famId))\n        .map((fam) => fam && fam.husb)\n        .map((husbId) => husbId && indiMap.get(husbId))\n        .map((husband) => husband && husband.lastName)\n        .join(' ');\n}\n\nclass LunrSearchIndex implements SearchIndex {\n    private index: lunr.Index | undefined;\n    private indiMap: Map<string, JsonIndi>;\n    private famMap: Map<string, JsonFam>;\n\n    constructor(data: JsonGedcomData) {\n        this.indiMap = idToIndiMap(data);\n        this.famMap = idToFamMap(data);\n    }\n\n    initialize() {\n        const self = this;\n        this.index = lunr(function () {\n            //Trimmer will break non-latin characters, so custom multilingual implementation must be used\n            self.initMultiLingualLunrWithoutTrimmer(this, [\n                'de',\n                'en',\n                'fr',\n                'it',\n                'ru',\n            ]);\n            this.ref('id');\n            this.field('id');\n            this.field('name', {boost: 10});\n            this.field('normalizedName', {boost: 8});\n            this.field('spouseLastName', {boost: 2});\n            this.field('normalizedSpouseLastName', {boost: 2});\n\n            self.indiMap.forEach((indi) => {\n                const name = [indi.firstName, indi.lastName].join(' ');\n                const spouseLastName = getHusbandLastName(\n                    indi,\n                    self.indiMap,\n                    self.famMap,\n                );\n                this.add({\n                    id: indi.id,\n                    name,\n                    normalizedName: normalize(name),\n                    spouseLastName,\n                    normalizedSpouseLastName: normalize(spouseLastName),\n                });\n            });\n        });\n    }\n\n    private initMultiLingualLunrWithoutTrimmer(\n        lunrInstance: any,\n        languages: string[],\n    ): void {\n        let wordCharacters = '';\n        const pipelineFunctions: PipelineFunction[] = [];\n        const searchPipelineFunctions: PipelineFunction[] = [];\n        languages.forEach((language) => {\n            if (language === 'en') {\n                wordCharacters += '\\\\w';\n                pipelineFunctions.unshift(lunr.stopWordFilter);\n                pipelineFunctions.push(lunr.stemmer);\n                searchPipelineFunctions.push(lunr.stemmer);\n            } else {\n                wordCharacters += lunr[language].wordCharacters;\n                if (lunr[language].stopWordFilter) {\n                    pipelineFunctions.unshift(lunr[language].stopWordFilter);\n                }\n                if (lunr[language].stemmer) {\n                    pipelineFunctions.push(lunr[language].stemmer);\n                    searchPipelineFunctions.push(lunr[language].stemmer);\n                }\n            }\n        });\n        lunrInstance.pipeline.reset();\n        lunrInstance.pipeline.add.apply(lunrInstance.pipeline, pipelineFunctions);\n\n        if (lunrInstance.searchPipeline) {\n            lunrInstance.searchPipeline.reset();\n            lunrInstance.searchPipeline.add.apply(\n                lunrInstance.searchPipeline,\n                searchPipelineFunctions,\n            );\n        }\n    }\n\n    public search(input: string): SearchResult[] {\n        const query = input\n            .split(' ')\n            .filter((s) => !!s)\n            .map((s) => `${s} ${s}*`)\n            .join(' ');\n        const results = this.index!.search(query);\n        return results\n            .sort(compare)\n            .slice(0, MAX_RESULTS)\n            .map((result) => ({id: result.ref, indi: this.indiMap.get(result.ref)!}));\n    }\n}\n\n/** Builds a search index from data. */\nexport function buildSearchIndex(data: JsonGedcomData): SearchIndex {\n    const index = new LunrSearchIndex(data);\n    index.initialize();\n    return index;\n}\n","import debounce from 'debounce';\nimport {buildSearchIndex, SearchIndex, SearchResult} from './search_index';\nimport {formatDateOrRange} from '../util/date_util';\nimport {IndiInfo, JsonGedcomData} from 'topola';\nimport {JsonIndi} from 'topola';\nimport {Search, SearchResultProps} from 'semantic-ui-react';\nimport {useEffect, useRef, useState} from 'react';\nimport {useIntl} from 'react-intl';\n\nfunction getNameLine(result: SearchResult) {\n    const name = [result.indi.firstName, result.indi.lastName].join(' ').trim();\n    if (result.id.length > 8) {\n        return name;\n    }\n    return (\n        <>\n            {name} <i>({result.id})</i>\n        </>\n    );\n}\n\ninterface Props {\n    /** Data used for the search index. */\n    data: JsonGedcomData;\n    onSelection: (indiInfo: IndiInfo) => void;\n}\n\n/** Displays and handles the search box in the top bar. */\nexport function SearchBar(props: Props) {\n    const [searchResults, setSearchResults] = useState<SearchResultProps[]>([]);\n    const [searchString, setSearchString] = useState('');\n    const searchIndex = useRef<SearchIndex>();\n    const intl = useIntl();\n\n    function getDescriptionLine(indi: JsonIndi) {\n        const birthDate = formatDateOrRange(indi.birth, intl);\n        const deathDate = formatDateOrRange(indi.death, intl);\n        if (!deathDate) {\n            return birthDate;\n        }\n        return `${birthDate} – ${deathDate}`;\n    }\n\n    /** Produces an object that is displayed in the Semantic UI Search results. */\n    function displaySearchResult(result: SearchResult): SearchResultProps {\n        return {\n            id: result.id,\n            key: result.id,\n            title: getNameLine(result),\n            description: getDescriptionLine(result.indi),\n        } as SearchResultProps;\n    }\n\n    /** On search input change. */\n    function handleSearch(input: string | undefined) {\n        if (!input) {\n            return;\n        }\n        const results = searchIndex\n            .current!.search(input)\n            .map((result) => displaySearchResult(result));\n        setSearchResults(results);\n    }\n\n    const debouncedHandleSearch = useRef(debounce(handleSearch, 200));\n\n    /** On search result selected. */\n    function handleResultSelect(id: string) {\n        props.onSelection({id, generation: 0});\n        setSearchString('');\n    }\n\n    /** On search string changed. */\n    function onChange(value: string) {\n        debouncedHandleSearch.current(value);\n        setSearchString(value);\n    }\n\n    // Initialize the search index.\n    useEffect(() => {\n        searchIndex.current = buildSearchIndex(props.data);\n    }, [props.data]);\n\n    return (\n        <Search\n            onSearchChange={(_, data) => onChange(data.value!)}\n            onResultSelect={(_, data) => handleResultSelect(data.result.id)}\n            results={searchResults}\n            noResultsMessage={intl.formatMessage({\n                id: 'menu.search.no_results',\n                defaultMessage: 'No results found',\n            })}\n            placeholder={intl.formatMessage({\n                id: 'menu.search.placeholder',\n                defaultMessage: 'Search for people',\n            })}\n            selectFirstResult={true}\n            value={searchString}\n            id=\"search\"\n        />\n    );\n}\n","import * as queryString from 'query-string';\nimport md5 from 'md5';\nimport {Dropdown, Icon, Menu} from 'semantic-ui-react';\nimport {FormattedMessage} from 'react-intl';\nimport {MenuType} from './menu_item';\nimport {SyntheticEvent} from 'react';\nimport {useHistory, useLocation} from 'react-router';\nimport {loadFile} from '../datasource/load_data';\n\nfunction isImageFileName(fileName: string) {\n    const lower = fileName.toLowerCase();\n    return lower.endsWith('.jpg') || lower.endsWith('.png');\n}\n\ninterface Props {\n    menuType: MenuType;\n}\n\n/** Displays and handles the \"Open file\" menu. */\nexport function UploadMenu(props: Props) {\n    const history = useHistory();\n    const location = useLocation();\n\n    async function handleUpload(event: SyntheticEvent<HTMLInputElement>) {\n        const files = (event.target as HTMLInputElement).files;\n        if (!files || !files.length) {\n            return;\n        }\n        const filesArray = Array.from(files);\n        (event.target as HTMLInputElement).value = ''; // Reset the file input.\n\n        const gedcomFile =\n            filesArray.length === 1\n                ? filesArray[0]\n                : filesArray.find((file) => file.name.toLowerCase().endsWith('.ged')) ||\n                filesArray[0];\n        const {gedcom, images} = await loadFile(gedcomFile);\n\n        // Convert uploaded images to object URLs.\n        filesArray\n            .filter((file) => file.name !== gedcomFile.name && isImageFileName(file.name))\n            .forEach((file) => images.set(file.name, URL.createObjectURL(file)));\n\n        // Hash GEDCOM contents with uploaded image file names.\n        const imageFileNames = Array.from(images.keys()).sort().join('|');\n        const hash = md5(md5(gedcom) + imageFileNames);\n\n        // Use history.replace() when re-uploading the same file and history.push() when loading a new file.\n        const search = queryString.parse(location.search);\n        const historyPush = search.file === hash ? history.replace : history.push;\n\n        historyPush({\n            pathname: '/view',\n            search: queryString.stringify({file: hash}),\n            state: {data: gedcom, images},\n        });\n    }\n\n    const content = (\n        <>\n            <Icon name=\"folder open\"/>\n            <FormattedMessage id=\"menu.open_file\" defaultMessage=\"Open file\"/>\n        </>\n    );\n    return (\n        <>\n            {props.menuType === MenuType.Menu ? (\n                <label htmlFor=\"fileInput\">\n                    <Menu.Item as=\"a\">{content}</Menu.Item>\n                </label>\n            ) : (\n                <Dropdown.Item as=\"label\" htmlFor=\"fileInput\">\n                    {content}\n                </Dropdown.Item>\n            )}\n            <input\n                className=\"hidden\"\n                type=\"file\"\n                accept=\".ged,.gdz,.gedzip,.zip,image/*\"\n                id=\"fileInput\"\n                multiple\n                onChange={handleUpload}\n            />\n        </>\n    );\n}\n","import {Dropdown, Icon, Menu} from 'semantic-ui-react';\nimport {FormattedMessage} from 'react-intl';\nimport {IndiInfo, JsonGedcomData} from 'topola';\nimport {Media} from '../util/media';\nimport {MenuType} from './menu_item';\nimport {SearchBar} from './search';\nimport {UploadMenu} from './upload_menu';\nimport {UrlMenu} from './url_menu';\nimport {useHistory, useLocation} from 'react-router';\n\nenum ScreenSize {\n    LARGE,\n    SMALL,\n}\n\ninterface EventHandlers {\n    onSelection: (indiInfo: IndiInfo) => void;\n    onDownloadPdf: () => void;\n    onDownloadPng: () => void;\n    onDownloadSvg: () => void;\n    onCenterView: () => void;\n}\n\ninterface Props {\n    /** True if the application is currently showing a chart. */\n    showingChart: boolean;\n    /** Data used for the search index. */\n    data?: JsonGedcomData;\n    standalone: boolean;\n    eventHandlers: EventHandlers;\n}\n\nexport function TopBar(props: Props) {\n    useHistory();\n    useLocation();\n    function chartMenus(screenSize: ScreenSize) {\n        if (!props.showingChart) {\n            return null;\n        }\n        switch (screenSize) {\n            case ScreenSize.LARGE:\n                return (\n                    <>\n                        <Dropdown\n                            trigger={\n                                <div>\n                                    <Icon name=\"download\"/>\n                                    <FormattedMessage id=\"menu.download\" defaultMessage=\"Download\"/>\n                                </div>\n                            }\n                            className=\"item\"\n                        >\n                            <Dropdown.Menu>\n                                <Dropdown.Item onClick={props.eventHandlers.onDownloadPdf}>\n                                    <FormattedMessage id=\"menu.pdf_file\" defaultMessage=\"PDF file\"/>\n                                </Dropdown.Item>\n                                <Dropdown.Item onClick={props.eventHandlers.onDownloadPng}>\n                                    <FormattedMessage id=\"menu.png_file\" defaultMessage=\"PNG file\"/>\n                                </Dropdown.Item>\n                                <Dropdown.Item onClick={props.eventHandlers.onDownloadSvg}>\n                                    <FormattedMessage id=\"menu.svg_file\" defaultMessage=\"SVG file\"/>\n                                </Dropdown.Item>\n                            </Dropdown.Menu>\n                        </Dropdown>\n\n                        <Menu.Item onClick={props.eventHandlers.onCenterView}>\n                            <Icon name=\"eye\" />\n                            <FormattedMessage id=\"menu.view\" defaultMessage=\"Center view\" />\n                        </Menu.Item>\n\n                        <Menu.Menu position=\"right\">\n                            <SearchBar\n                                data={props.data!}\n                                onSelection={props.eventHandlers.onSelection}\n                                {...props}\n                            />\n                        </Menu.Menu>\n                    </>\n                );\n\n            case ScreenSize.SMALL:\n                return (\n                    <>\n                        <Dropdown.Item onClick={props.eventHandlers.onDownloadPdf}>\n                            <Icon name=\"download\"/>\n                            <FormattedMessage id=\"menu.download_pdf\" defaultMessage=\"Download PDF\"/>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={props.eventHandlers.onDownloadPng}>\n                            <Icon name=\"download\"/>\n                            <FormattedMessage id=\"menu.download_png\" defaultMessage=\"Download PNG\"/>\n                        </Dropdown.Item>\n                        <Dropdown.Item onClick={props.eventHandlers.onDownloadSvg}>\n                            <Icon name=\"download\"/>\n                            <FormattedMessage id=\"menu.download_svg\" defaultMessage=\"Download SVG\"/>\n                        </Dropdown.Item>\n                        <Dropdown.Divider/>\n                    </>\n                );\n        }\n    }\n\n    function fileMenus(screenSize: ScreenSize) {\n        // Don't show \"open\" menus in non-standalone mode.\n        if (!props.standalone) {\n            return null;\n        }\n\n        switch (screenSize) {\n            case ScreenSize.LARGE:\n                // Show dropdown if chart is shown, otherwise show individual menu items.\n                return props.showingChart ? (\n                    <>\n                        <UploadMenu menuType={MenuType.Menu} {...props} />\n                        {/*<UrlMenu menuType={MenuType.Menu} {...props} />*/}\n                    </>\n                ) : (\n                    <Dropdown\n                        trigger={\n                            <div>\n                                <Icon name=\"folder open\"/>\n                                <FormattedMessage id=\"menu.open\" defaultMessage=\"Open\"/>\n                            </div>\n                        }\n                        className=\"item\"\n                    >\n                        <Dropdown.Menu>\n                            <UploadMenu menuType={MenuType.Dropdown} {...props} />\n                            <UrlMenu menuType={MenuType.Dropdown} {...props} />\n                        </Dropdown.Menu>\n                    </Dropdown>\n                );\n\n            case ScreenSize.SMALL:\n                return (\n                    <>\n                        <UploadMenu menuType={MenuType.Dropdown} {...props} />\n                        {/*<UrlMenu menuType={MenuType.Dropdown} {...props} />*/}\n                        <Dropdown.Divider/>\n                    </>\n                );\n        }\n    }\n\n    function mobileMenus() {\n        return (\n            <>\n                <Dropdown\n                    trigger={\n                        <div>\n                            <Icon name=\"sidebar\"/>\n                        </div>\n                    }\n                    className=\"item\"\n                    icon={null}\n                >\n                    <Dropdown.Menu>\n                        {fileMenus(ScreenSize.SMALL)}\n                        {chartMenus(ScreenSize.SMALL)}\n                    </Dropdown.Menu>\n                </Dropdown>\n            </>\n        );\n    }\n\n    function desktopMenus() {\n        return (\n            <>\n                {fileMenus(ScreenSize.LARGE)}\n                {chartMenus(ScreenSize.LARGE)}\n            </>\n        );\n    }\n\n    return (\n        <>\n            <Menu\n                as={Media}\n                greaterThanOrEqual=\"large\"\n                attached=\"top\"\n                inverted\n                color=\"blue\"\n                size=\"large\"\n            >\n                {desktopMenus()}\n            </Menu>\n            <Menu\n                as={Media}\n                at=\"small\"\n                attached=\"top\"\n                inverted\n                color=\"blue\"\n                size=\"large\"\n            >\n                {mobileMenus()}\n            </Menu>\n        </>\n    );\n}\n","import * as queryString from 'query-string';\nimport {Button, Form, Header, Icon, Input, Modal} from 'semantic-ui-react';\nimport {FormattedMessage} from 'react-intl';\nimport {MenuItem, MenuType} from './menu_item';\nimport {useEffect, useRef, useState} from 'react';\nimport {useHistory} from 'react-router';\n\ninterface Props {\n    menuType: MenuType;\n}\n\n/** Displays and handles the \"Open URL\" menu. */\nexport function UrlMenu(props: Props) {\n    const [dialogOpen, setDialogOpen] = useState(false);\n    const [url, setUrl] = useState('');\n    const inputRef = useRef<Input>(null);\n    const history = useHistory();\n\n    useEffect(() => {\n        if (dialogOpen) {\n            setUrl('');\n            inputRef.current!.focus();\n        }\n    }, [dialogOpen]);\n\n    /** Load button clicked in the \"Load from URL\" dialog. */\n    function handleLoad() {\n        setDialogOpen(false);\n        if (url) {\n            history.push({\n                pathname: '/view',\n                search: queryString.stringify({url}),\n            });\n        }\n    }\n\n    function loadFromUrlModal() {\n        return (\n            <Modal\n                open={dialogOpen}\n                onClose={() => setDialogOpen(false)}\n                centered={false}\n            >\n                <Header>\n                    <Icon name=\"cloud download\"/>\n                    <FormattedMessage\n                        id=\"load_from_url.title\"\n                        defaultMessage=\"Load from URL\"\n                    />\n                </Header>\n                <Modal.Content>\n                    <Form onSubmit={handleLoad}>\n                        <Input\n                            placeholder=\"https://\"\n                            fluid\n                            value={url}\n                            onChange={(_, data) => setUrl(data.value)}\n                            ref={inputRef}\n                        />\n                        <p>\n                            <FormattedMessage\n                                id=\"load_from_url.comment\"\n                                defaultMessage={\n                                    'Data from the URL will be loaded through {link} to avoid CORS issues.'\n                                }\n                                values={{\n                                    link: (\n                                        <a href=\"https://topolaproxy.bieda.it/\">\n                                            topolaproxy.bieda.it (cors-anywhere proxy)\n                                        </a>\n                                    ),\n                                }}\n                            />\n                        </p>\n                    </Form>\n                </Modal.Content>\n                <Modal.Actions>\n                    <Button secondary onClick={() => setDialogOpen(false)}>\n                        <FormattedMessage\n                            id=\"load_from_url.cancel\"\n                            defaultMessage=\"Cancel\"\n                        />\n                    </Button>\n                    <Button primary onClick={handleLoad}>\n                        <FormattedMessage id=\"load_from_url.load\" defaultMessage=\"Load\"/>\n                    </Button>\n                </Modal.Actions>\n            </Modal>\n        );\n    }\n\n    return (\n        <>\n            <MenuItem onClick={() => setDialogOpen(true)} menuType={props.menuType}>\n                <Icon name=\"cloud download\"/>\n                <FormattedMessage\n                    id=\"menu.load_from_url\"\n                    defaultMessage=\"Load from URL\"\n                />\n            </MenuItem>\n            {loadFromUrlModal()}\n        </>\n    );\n}\n","import {Item, Checkbox, Form, Header} from 'semantic-ui-react';\nimport {FormattedMessage} from 'react-intl';\nimport {ParsedQuery} from 'query-string';\n\nexport enum ChartColors {\n    NO_COLOR,\n    COLOR_BY_SEX,\n    COLOR_BY_GENERATION,\n}\n\nexport enum Ids {\n    HIDE,\n    SHOW,\n}\n\nexport enum Sex {\n    HIDE,\n    SHOW,\n}\n\nexport interface Config {\n    color: ChartColors;\n    id: Ids;\n    sex: Sex;\n}\n\nexport const DEFAULT_CONFIG: Config = {\n    color: ChartColors.COLOR_BY_GENERATION,\n    id: Ids.SHOW,\n    sex: Sex.SHOW,\n};\n\nconst COLOR_ARG = new Map<string, ChartColors>([\n    ['n', ChartColors.NO_COLOR],\n    ['g', ChartColors.COLOR_BY_GENERATION],\n    ['s', ChartColors.COLOR_BY_SEX],\n]);\nconst COLOR_ARG_INVERSE = new Map<ChartColors, string>();\nCOLOR_ARG.forEach((v, k) => COLOR_ARG_INVERSE.set(v, k));\n\nconst ID_ARG = new Map<string, Ids>([\n    ['h', Ids.HIDE],\n    ['s', Ids.SHOW],\n]);\nconst ID_ARG_INVERSE = new Map<Ids, string>();\nID_ARG.forEach((v, k) => ID_ARG_INVERSE.set(v, k));\n\nconst SEX_ARG = new Map<string, Sex>([\n    ['h', Sex.HIDE],\n    ['s', Sex.SHOW],\n]);\nconst SEX_ARG_INVERSE = new Map<Sex, string>();\nSEX_ARG.forEach((v, k) => SEX_ARG_INVERSE.set(v, k));\n\nexport function argsToConfig(args: ParsedQuery<any>): Config {\n    const getParam = (name: string) => {\n        const value = args[name];\n        return typeof value === 'string' ? value : undefined;\n    };\n\n    return {\n        color: COLOR_ARG.get(getParam('c') ?? '') ?? DEFAULT_CONFIG.color,\n        id: ID_ARG.get(getParam('i') ?? '') ?? DEFAULT_CONFIG.id,\n        sex: SEX_ARG.get(getParam('s') ?? '') ?? DEFAULT_CONFIG.sex,\n    };\n}\n\nexport function configToArgs(config: Config): ParsedQuery<any> {\n    return {\n        c: COLOR_ARG_INVERSE.get(config.color),\n        i: ID_ARG_INVERSE.get(config.id),\n        s: SEX_ARG_INVERSE.get(config.sex),\n    };\n}\n\nexport function ConfigPanel(props: {\n    config: Config;\n    onChange: (config: Config) => void;\n}) {\n    return (\n        <Form className=\"details\">\n            <Item.Group>\n                <Item>\n                    <Item.Content>\n                        <Header sub>\n                            <FormattedMessage id=\"config.colors\" defaultMessage=\"Colors\"/>\n                        </Header>\n                        <Form.Field className=\"no-margin\">\n                            <Checkbox\n                                radio\n                                label={\n                                    <FormattedMessage tagName=\"label\" id=\"config.colors.NO_COLOR\" defaultMessage=\"none\"/>\n                                }\n                                name=\"checkboxRadioGroup\"\n                                value=\"none\"\n                                checked={props.config.color === ChartColors.NO_COLOR}\n                                onClick={() =>\n                                    props.onChange({...props.config, color: ChartColors.NO_COLOR})\n                                }\n                            />\n                        </Form.Field>\n                        <Form.Field className=\"no-margin\">\n                            <Checkbox\n                                radio\n                                label={\n                                    <FormattedMessage tagName=\"label\" id=\"config.colors.COLOR_BY_GENERATION\" defaultMessage=\"by generation\"/>\n                                }\n                                name=\"checkboxRadioGroup\"\n                                value=\"generation\"\n                                checked={props.config.color === ChartColors.COLOR_BY_GENERATION}\n                                onClick={() =>\n                                    props.onChange({...props.config, color: ChartColors.COLOR_BY_GENERATION})\n                                }\n                            />\n                        </Form.Field>\n                        <Form.Field className=\"no-margin\">\n                            <Checkbox\n                                radio\n                                label={\n                                    <FormattedMessage tagName=\"label\" id=\"config.colors.COLOR_BY_SEX\" defaultMessage=\"by sex\"/>\n                                }\n                                name=\"checkboxRadioGroup\"\n                                value=\"gender\"\n                                checked={props.config.color === ChartColors.COLOR_BY_SEX}\n                                onClick={() =>\n                                    props.onChange({...props.config, color: ChartColors.COLOR_BY_SEX})\n                                }\n                            />\n                        </Form.Field>\n                    </Item.Content>\n                </Item>\n                <Item>\n                    <Item.Content>\n                        <Header sub>\n                            <FormattedMessage id=\"config.ids\" defaultMessage=\"IDs\"/>\n                        </Header>\n                        <Form.Field className=\"no-margin\">\n                            <Checkbox\n                                radio\n                                label={\n                                    <FormattedMessage tagName=\"label\" id=\"config.ids.HIDE\" defaultMessage=\"hide\"/>\n                                }\n                                name=\"checkboxRadioGroup\"\n                                value=\"hide\"\n                                checked={props.config.id === Ids.HIDE}\n                                onClick={() =>\n                                    props.onChange({...props.config, id: Ids.HIDE})\n                                }\n                            />\n                        </Form.Field>\n                        <Form.Field className=\"no-margin\">\n                            <Checkbox\n                                radio\n                                label={\n                                    <FormattedMessage tagName=\"label\" id=\"config.ids.SHOW\" defaultMessage=\"show\"/>\n                                }\n                                name=\"checkboxRadioGroup\"\n                                value=\"show\"\n                                checked={props.config.id === Ids.SHOW}\n                                onClick={() =>\n                                    props.onChange({...props.config, id: Ids.SHOW})\n                                }\n                            />\n                        </Form.Field>\n                    </Item.Content>\n                </Item>\n                <Item>\n                    <Item.Content>\n                        <Header sub>\n                            <FormattedMessage id=\"config.sex\" defaultMessage=\"Sex\"/>\n                        </Header>\n                        <Form.Field className=\"no-margin\">\n                            <Checkbox\n                                radio\n                                label={\n                                    <FormattedMessage tagName=\"label\" id=\"config.sex.HIDE\" defaultMessage=\"hide\"/>\n                                }\n                                name=\"checkboxRadioGroup\"\n                                value=\"hide\"\n                                checked={props.config.sex === Sex.HIDE}\n                                onClick={() =>\n                                    props.onChange({...props.config, sex: Sex.HIDE})\n                                }\n                            />\n                        </Form.Field>\n                        <Form.Field className=\"no-margin\">\n                            <Checkbox\n                                radio\n                                label={\n                                    <FormattedMessage tagName=\"label\" id=\"config.sex.SHOW\" defaultMessage=\"show\"/>\n                                }\n                                name=\"checkboxRadioGroup\"\n                                value=\"show\"\n                                checked={props.config.sex === Sex.SHOW}\n                                onClick={() =>\n                                    props.onChange({...props.config, sex: Sex.SHOW})\n                                }\n                            />\n                        </Form.Field>\n                    </Item.Content>\n                </Item>\n            </Item.Group>\n        </Form>\n    );\n}\n","import {ChartColors, Ids, Sex} from './config';\nimport {interpolateNumber} from 'd3-interpolate';\nimport {IntlShape, useIntl} from 'react-intl';\nimport {max, min} from 'd3-array';\nimport {Media} from './util/media';\nimport {saveAs} from 'file-saver';\nimport {select, Selection} from 'd3-selection';\nimport {useEffect, useRef} from 'react';\nimport 'd3-transition';\nimport {D3ZoomEvent, zoom, ZoomBehavior, ZoomedElementBaseType, zoomTransform,} from 'd3-zoom';\nimport {\n    ChartColors as TopolaChartColors,\n    ChartHandle,\n    createChart,\n    DetailedRenderer,\n    HourglassChart,\n    IndiInfo,\n    JsonGedcomData,\n} from 'topola';\n\n\n/** How much to zoom when using the +/- buttons. */\nconst ZOOM_FACTOR = 1.3;\n\n/**\n * Called when the view is dragged with the mouse.\n *\n * @param size the size of the chart\n * @param event\n */\nfunction zoomed(\n    size: [number, number],\n    event: D3ZoomEvent<ZoomedElementBaseType, unknown>,\n) {\n    const parent = select('#svgContainer').node() as Element;\n    const scale = event.transform.k;\n    const offsetX = max([0, (parent.clientWidth - size[0] * scale) / 2]);\n    const offsetY = max([0, (parent.clientHeight - size[1] * scale) / 2]);\n    select('#chartSvg')\n        .attr('width', size[0] * scale)\n        .attr('height', size[1] * scale)\n        .attr('transform', `translate(${offsetX}, ${offsetY})`);\n    select('#chart').attr('transform', `scale(${scale})`);\n    parent.scrollLeft = -event.transform.x;\n    parent.scrollTop = -event.transform.y;\n}\n\n/** Called when the scrollbars are used. */\nfunction scrolled() {\n    const parent = select('#svgContainer').node() as Element;\n    const x = parent.scrollLeft + parent.clientWidth / 2;\n    const y = parent.scrollTop + parent.clientHeight / 2;\n    const scale = zoomTransform(parent).k;\n    select(parent).call(zoom().translateTo, x / scale, y / scale);\n}\n\n/** Loads blob as data URL. */\nfunction loadAsDataUrl(blob: Blob): Promise<string> {\n    const reader = new FileReader();\n    reader.readAsDataURL(blob);\n    return new Promise<string>((resolve) => {\n        reader.onload = (e) => resolve((e.target as FileReader).result as string);\n    });\n}\n\nasync function inlineImage(image: SVGImageElement) {\n    const href = image.href.baseVal;\n    if (!href) {\n        return;\n    }\n    try {\n        const response = await fetch(href);\n        const blob = await response.blob();\n        image.href.baseVal = await loadAsDataUrl(blob);\n    } catch (e) {\n        console.warn('Failed to load image:', e);\n    }\n}\n\n/**\n * Fetches all images in the SVG and replaces them with inlined images as data\n * URLs. Images are replaced in place. The replacement is done, the returned\n * promise is resolved.\n */\nasync function inlineImages(svg: Element): Promise<void> {\n    const images = Array.from(svg.getElementsByTagName('image'));\n    await Promise.all(images.map(inlineImage));\n}\n\n/** Loads a blob into an image object. */\nfunction loadImage(blob: Blob): Promise<HTMLImageElement> {\n    const image = new Image();\n    image.src = URL.createObjectURL(blob);\n    return new Promise<HTMLImageElement>((resolve) => {\n        image.addEventListener('load', () => resolve(image));\n    });\n}\n\n/** Draw image on a new canvas and return the canvas. */\nfunction drawImageOnCanvas(image: HTMLImageElement) {\n    const canvas = document.createElement('canvas');\n    // Scale image for better quality.\n    canvas.width = image.width * 2;\n    canvas.height = image.height * 2;\n    const ctx = canvas.getContext('2d')!;\n    const oldFill = ctx.fillStyle;\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.fillStyle = oldFill;\n    ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n    return canvas;\n}\n\nfunction canvasToBlob(canvas: HTMLCanvasElement, type: string) {\n    return new Promise<Blob>((resolve, reject) => {\n        canvas.toBlob((blob) => {\n            if (blob) {\n                resolve(blob);\n            } else {\n                reject();\n            }\n        }, type);\n    });\n}\n\n/** Return a copy of the SVG chart but without scaling and positioning. */\nfunction getStrippedSvg() {\n    const svg = document.getElementById('chartSvg')!.cloneNode(true) as Element;\n    svg.removeAttribute('transform');\n    const parent = select('#svgContainer').node() as Element;\n    const scale = zoomTransform(parent).k;\n    svg.setAttribute('width', String(Number(svg.getAttribute('width')) / scale));\n    svg.setAttribute(\n        'height',\n        String(Number(svg.getAttribute('height')) / scale),\n    );\n    svg.querySelector('#chart')!.removeAttribute('transform');\n    return svg;\n}\n\nasync function getSvgContentsWithInlinedImages() {\n    const svg = getStrippedSvg();\n    await inlineImages(svg);\n    return new XMLSerializer().serializeToString(svg);\n}\n\nexport async function downloadSvg() {\n    const contents = await getSvgContentsWithInlinedImages();\n    const blob = new Blob([contents], {type: 'image/svg+xml'});\n    saveAs(blob, 'genealogy.svg');\n}\n\nasync function drawOnCanvas(): Promise<HTMLCanvasElement> {\n    const contents = await getSvgContentsWithInlinedImages();\n    const blob = new Blob([contents], {type: 'image/svg+xml'});\n    return drawImageOnCanvas(await loadImage(blob));\n}\n\nexport async function downloadPng() {\n    const canvas = await drawOnCanvas();\n    const blob = await canvasToBlob(canvas, 'image/png');\n    saveAs(blob, 'genealogy.png');\n}\n\nexport async function downloadPdf() {\n    // Lazy load jspdf.\n    const {default: jspdf} = await import('jspdf');\n    const canvas = await drawOnCanvas();\n    const doc = new jspdf({\n        orientation: canvas.width > canvas.height ? 'l' : 'p',\n        unit: 'pt',\n        format: [canvas.width, canvas.height],\n    });\n    doc.addImage(canvas, 'PNG', 0, 0, canvas.width, canvas.height, 'NONE');\n    doc.save('genealogy.pdf');\n}\n\n/** Supported chart types. */\nexport enum ChartType {\n    Hourglass\n}\n\nconst chartColors = new Map<ChartColors, TopolaChartColors>([\n    [ChartColors.NO_COLOR, TopolaChartColors.NO_COLOR],\n    [ChartColors.COLOR_BY_GENERATION, TopolaChartColors.COLOR_BY_GENERATION],\n    [ChartColors.COLOR_BY_SEX, TopolaChartColors.COLOR_BY_SEX],\n]);\n\nexport interface ChartProps {\n    data: JsonGedcomData;\n    selection: IndiInfo;\n    chartType: ChartType;\n    onSelection: (indiInfo: IndiInfo) => void;\n    freezeAnimation?: boolean;\n    colors?: ChartColors;\n    hideIds?: Ids;\n    hideSex?: Sex;\n}\n\nclass ChartWrapper {\n    private chart?: ChartHandle;\n    /** Animation is in progress. */\n    private animating = false;\n    /** Rendering is required after the current animation finishes. */\n    private rerenderRequired = false;\n    /** The d3 zoom behavior object. */\n    private zoomBehavior?: ZoomBehavior<Element, any>;\n    /** Props that will be used for re-rendering. */\n    private rerenderProps?: ChartProps;\n    private rerenderResetPosition?: boolean;\n\n    zoom(factor: number) {\n        const parent = select('#svgContainer') as Selection<Element, any, any, any>;\n        this.zoomBehavior!.scaleBy(parent, factor);\n    }\n\n    /**\n     * Renders the chart or performs a transition animation to a new state.\n     * If indiInfo is not given, it means that it is the initial render and no\n     * animation is performed.\n     */\n    renderChart(\n        props: ChartProps,\n        intl: IntlShape,\n        args: { initialRender: boolean; resetPosition: boolean } = {\n            initialRender: false,\n            resetPosition: false,\n        },\n    ) {\n        // Wait for animation to finish if animation is in progress.\n        if (!args.initialRender && this.animating) {\n            this.rerenderRequired = true;\n            this.rerenderProps = props;\n            this.rerenderResetPosition = args.resetPosition;\n            return;\n        }\n\n        // Freeze changing selection after initial rendering.\n        if (!args.initialRender && props.freezeAnimation) {\n            return;\n        }\n\n        if (args.initialRender) {\n            (select('#chart').node() as HTMLElement).innerHTML = '';\n            this.chart = createChart({\n                json: props.data,\n                chartType: HourglassChart,\n                renderer: DetailedRenderer,\n                svgSelector: '#chart',\n                indiCallback: (info) => props.onSelection(info),\n                colors: chartColors.get(props.colors!),\n                animate: true,\n                updateSvgSize: false,\n                locale: intl.locale,\n            });\n        } else {\n            this.chart!.setData(props.data);\n        }\n\n        const chartInfo = this.chart!.render({\n            startIndi: props.selection.id,\n            baseGeneration: props.selection.generation,\n        });\n        const svg = select('#chartSvg');\n        const parent = select('#svgContainer').node() as Element;\n        const scale = zoomTransform(parent).k;\n        const zoomOutFactor = min([\n            1,\n            scale,\n            parent.clientWidth / chartInfo.size[0],\n            parent.clientHeight / chartInfo.size[1],\n        ])!;\n        const extent: [number, number] = [max([0.1, zoomOutFactor])!, 2];\n\n        this.zoomBehavior = zoom()\n            .scaleExtent(extent)\n            .translateExtent([[0, 0], chartInfo.size])\n            .on('zoom', (event) => zoomed(chartInfo.size, event));\n        select(parent).on('scroll', scrolled).call(this.zoomBehavior);\n\n        const scrollTopTween = (scrollTop: number) => {\n            return () => {\n                const i = interpolateNumber(parent.scrollTop, scrollTop);\n                return (t: number) => {\n                    parent.scrollTop = i(t);\n                };\n            };\n        };\n        const scrollLeftTween = (scrollLeft: number) => {\n            return () => {\n                const i = interpolateNumber(parent.scrollLeft, scrollLeft);\n                return (t: number) => {\n                    parent.scrollLeft = i(t);\n                };\n            };\n        };\n\n        const dx = parent.clientWidth / 2 - chartInfo.origin[0] * scale;\n        const dy = parent.clientHeight / 2 - chartInfo.origin[1] * scale;\n        const offsetX = max([\n            0,\n            (parent.clientWidth - chartInfo.size[0] * scale) / 2,\n        ]);\n        const offsetY = max([\n            0,\n            (parent.clientHeight - chartInfo.size[1] * scale) / 2,\n        ]);\n        const svgTransition = svg.transition().delay(200).duration(500);\n        const transition = args.initialRender ? svg : svgTransition;\n        transition\n            .attr('transform', `translate(${offsetX}, ${offsetY})`)\n            .attr('width', chartInfo.size[0] * scale)\n            .attr('height', chartInfo.size[1] * scale);\n        if (args.resetPosition) {\n            if (args.initialRender) {\n                parent.scrollLeft = -dx;\n                parent.scrollTop = -dy;\n            } else {\n                svgTransition\n                    .tween('scrollLeft', scrollLeftTween(-dx))\n                    .tween('scrollTop', scrollTopTween(-dy));\n            }\n        }\n\n        // After the animation is finished, rerender the chart if required.\n        this.animating = true;\n        chartInfo.animationPromise.then(() => {\n            this.animating = false;\n            if (this.rerenderRequired) {\n                this.rerenderRequired = false;\n                // Use `this.rerenderProps` instead of the props in scope because\n                // the props may have been updated in the meantime.\n                this.renderChart(this.rerenderProps!, intl, {\n                    initialRender: false,\n                    resetPosition: !!this.rerenderResetPosition,\n                });\n            }\n        });\n    }\n}\n\nfunction usePrevious<T>(value: T): T | undefined {\n    const ref = useRef<T>();\n    useEffect(() => {\n        ref.current = value;\n    });\n    return ref.current;\n}\n\nexport function Chart(props: ChartProps) {\n    const chartWrapper = useRef(new ChartWrapper());\n    const prevProps = usePrevious(props);\n    const intl = useIntl();\n\n    useEffect(() => {\n        if (prevProps) {\n            const initialRender =\n                props.chartType !== prevProps?.chartType ||\n                props.colors !== prevProps?.colors ||\n                props.hideIds !== prevProps?.hideIds ||\n                props.hideSex !== prevProps?.hideSex;\n            const resetPosition =\n                props.chartType !== prevProps?.chartType ||\n                props.data !== prevProps.data ||\n                props.selection !== prevProps.selection;\n            chartWrapper.current.renderChart(props, intl, {\n                initialRender,\n                resetPosition,\n            });\n        } else {\n            chartWrapper.current.renderChart(props, intl, {\n                initialRender: true,\n                resetPosition: true,\n            });\n        }\n    });\n\n    return (\n        <div id=\"svgContainer\">\n            <Media greaterThanOrEqual=\"large\" className=\"zoom\">\n                <button className=\"zoom-in\" onClick={() => chartWrapper.current.zoom(ZOOM_FACTOR)}>+</button>\n                <button className=\"zoom-out\" onClick={() => chartWrapper.current.zoom(1 / ZOOM_FACTOR)}>−</button>\n            </Media>\n            <svg id=\"chartSvg\">\n                <g id=\"chart\"/>\n            </svg>\n        </div>\n    );\n}\n","import * as H from 'history';\nimport * as queryString from 'query-string';\nimport {DataSourceEnum, SourceSelection} from './datasource/data_source';\nimport {Details} from './details/details';\nimport {EmbeddedDataSource, EmbeddedSourceSpec} from './datasource/embedded';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {getI18nMessage} from './util/error_i18n';\nimport {IndiInfo} from 'topola';\nimport {Loader, Message, Portal, Tab} from 'semantic-ui-react';\nimport {Media} from './util/media';\nimport {Redirect, Route, Switch} from 'react-router-dom';\nimport {TopBar} from './menu/top_bar';\nimport {TopolaData} from './util/gedcom_util';\nimport {useEffect, useState} from 'react';\nimport {useHistory, useLocation} from 'react-router';\nimport {idToIndiMap} from './util/gedcom_util';\nimport {\n    Chart,\n    ChartType,\n    downloadPdf,\n    downloadPng,\n    downloadSvg,\n} from './chart';\nimport {\n    argsToConfig,\n    Config,\n    ConfigPanel,\n    configToArgs,\n    DEFAULT_CONFIG,\n    Ids,\n    Sex,\n} from './config';\nimport {\n    getSelection,\n    UploadSourceSpec,\n    UrlSourceSpec,\n    GedcomUrlDataSource,\n    UploadedDataSource,\n} from './datasource/load_data';\n\n/**\n * Load GEDCOM URL from REACT_APP_STATIC_URL environment variable.\n *\n * If this environment variable is provided, the viewer is switched to\n * single-tree mode without the option to load other data.\n */\nconst staticUrl = process.env.REACT_APP_STATIC_URL;\n\n/** Shows an error message in the middle of the screen. */\nfunction ErrorMessage(props: { message?: string }) {\n    return (\n        <Message negative className=\"error\">\n            <Message.Header>\n                <FormattedMessage\n                    id=\"error.failed_to_load_file\"\n                    defaultMessage={'Failed to load file'}\n                />\n            </Message.Header>\n            <p>{props.message}</p>\n        </Message>\n    );\n}\n\ninterface ErrorPopupProps {\n    message?: string;\n    open: boolean;\n    onDismiss: () => void;\n}\n\n/**\n * Shows a dismissable error message in the bottom left corner of the screen.\n */\nfunction ErrorPopup(props: ErrorPopupProps) {\n    return (\n        <Portal open={props.open} onClose={props.onDismiss}>\n            <Message negative className=\"errorPopup\" onDismiss={props.onDismiss}>\n                <Message.Header>\n                    <FormattedMessage id=\"error.error\" defaultMessage={'Error'}/>\n                </Message.Header>\n                <p>{props.message}</p>\n            </Message>\n        </Portal>\n    );\n}\n\nenum AppState {\n    INITIAL,\n    LOADING,\n    ERROR,\n    SHOWING_CHART,\n    LOADING_MORE,\n}\n\ntype DataSourceSpec =\n    | UrlSourceSpec\n    | UploadSourceSpec\n    | EmbeddedSourceSpec;\n\n/**\n * Arguments passed to the application, primarily through URL parameters.\n * Non-optional arguments get populated with default values.\n */\ninterface Arguments {\n    sourceSpec?: DataSourceSpec;\n    selection?: IndiInfo;\n    chartType: ChartType;\n    standalone: boolean;\n    freezeAnimation: boolean;\n    showSidePanel: boolean;\n    config: Config;\n}\n\nfunction getParamFromSearch(name: string, search: queryString.ParsedQuery) {\n    const value = search[name];\n    return typeof value === 'string' ? value : undefined;\n}\n\n/**\n * Retrieve arguments passed into the application through the URL and uploaded\n * data.\n */\nfunction getArguments(location: H.Location<any>): Arguments {\n    const search = queryString.parse(location.search);\n    const getParam = (name: string) => getParamFromSearch(name, search);\n    const view = getParam('view');\n    const chartTypes = new Map<string | undefined, ChartType>([\n        ['hourglass', ChartType.Hourglass],\n    ]);\n\n    const hash = getParam('file');\n    const url = getParam('url');\n    const embedded = getParam('embedded') === 'true'; // False by default.\n    let sourceSpec: DataSourceSpec | undefined = undefined;\n    if (staticUrl) {\n        sourceSpec = {\n            source: DataSourceEnum.GEDCOM_URL,\n            url: staticUrl,\n            handleCors: false,\n        };\n    } else if (hash) {\n        sourceSpec = {\n            source: DataSourceEnum.UPLOADED,\n            hash,\n            gedcom: location.state && location.state.data,\n            images: location.state && location.state.images,\n        };\n    } else if (url) {\n        sourceSpec = {\n            source: DataSourceEnum.GEDCOM_URL,\n            url,\n            handleCors: getParam('handleCors') !== 'false', // True by default.\n        };\n    } else if (embedded) {\n        sourceSpec = {source: DataSourceEnum.EMBEDDED};\n    }\n\n    const indi = getParam('indi');\n    const parsedGen = Number(getParam('gen'));\n    const selection = indi\n        ? {id: indi, generation: !isNaN(parsedGen) ? parsedGen : 0}\n        : undefined;\n\n    return {\n        sourceSpec,\n        selection,\n        // Hourglass is the default view.\n        chartType: chartTypes.get(view) || ChartType.Hourglass,\n        showSidePanel: getParam('sidePanel') !== 'false', // True by default.\n        standalone: getParam('standalone') !== 'false' && !embedded && !staticUrl,\n        freezeAnimation: getParam('freeze') === 'true', // False by default\n        config: argsToConfig(search),\n    };\n}\n\nexport function App() {\n    /** State of the application. */\n    const [state, setState] = useState<AppState>(AppState.INITIAL);\n    /** Loaded data. */\n    const [data, setData] = useState<TopolaData>();\n    /** Selected individual. */\n    const [selection, setSelection] = useState<IndiInfo>();\n    /** Error to display. */\n    const [error, setError] = useState<string>();\n    /** Whether the side panel is shown. */\n    const [showSidePanel, setShowSidePanel] = useState(false);\n    /** Whether the app is in standalone mode, i.e. showing 'open file' menus. */\n    const [standalone, setStandalone] = useState(true);\n    /** Type of displayed chart. */\n    const [chartType, setChartType] = useState<ChartType>(ChartType.Hourglass);\n    /** Whether to show the error popup. */\n    const [showErrorPopup, setShowErrorPopup] = useState(false);\n    /** Specification of the source of the data. */\n    const [sourceSpec, setSourceSpec] = useState<DataSourceSpec>();\n    /** Freeze animations after initial chart render. */\n    const [freezeAnimation, setFreezeAnimation] = useState(false);\n    const [config, setConfig] = useState(DEFAULT_CONFIG);\n\n    const intl = useIntl();\n    const history = useHistory();\n    const location = useLocation();\n\n    /** Sets the state with a new individual selection and chart type. */\n    function updateDisplay(newSelection: IndiInfo) {\n        if (!selection || selection.id !== newSelection.id || selection!.generation !== newSelection.generation) {\n            setSelection(newSelection);\n        }\n    }\n\n    function toggleDetails(config: Config, data: TopolaData | undefined) {\n        if (data === undefined) {\n            return;\n        }\n        let shouldHideIds = config.id === Ids.HIDE;\n        let shouldHideSex = config.sex === Sex.HIDE;\n        let indiMap = idToIndiMap(data.chartData);\n        indiMap.forEach((indi) => {\n            indi.hideId = shouldHideIds;\n            indi.hideSex = shouldHideSex;\n        });\n    }\n\n    /** Sets error message after data load failure. */\n    function setErrorMessage(message: string) {\n        setError(message);\n        setState(AppState.ERROR);\n    }\n\n    const uploadedDataSource = new UploadedDataSource();\n    const gedcomUrlDataSource = new GedcomUrlDataSource();\n    const embeddedDataSource = new EmbeddedDataSource();\n\n    function isNewData(newSourceSpec: DataSourceSpec, newSelection?: IndiInfo) {\n        if (!sourceSpec || sourceSpec.source !== newSourceSpec.source) {\n            // New data source means new data.\n            return true;\n        }\n        const newSource = {spec: newSourceSpec, selection: newSelection};\n        const oldSource = {\n            spec: sourceSpec,\n            selection: selection,\n        };\n        switch (newSource.spec.source) {\n            case DataSourceEnum.UPLOADED:\n                return uploadedDataSource.isNewData(\n                    newSource as SourceSelection<UploadSourceSpec>,\n                    oldSource as SourceSelection<UploadSourceSpec>,\n                    data,\n                );\n            case DataSourceEnum.GEDCOM_URL:\n                return gedcomUrlDataSource.isNewData(\n                    newSource as SourceSelection<UrlSourceSpec>,\n                    oldSource as SourceSelection<UrlSourceSpec>,\n                    data,\n                );\n            case DataSourceEnum.EMBEDDED:\n                return embeddedDataSource.isNewData(\n                    newSource as SourceSelection<EmbeddedSourceSpec>,\n                    oldSource as SourceSelection<EmbeddedSourceSpec>,\n                    data,\n                );\n        }\n    }\n\n    function loadData(newSourceSpec: DataSourceSpec, newSelection?: IndiInfo) {\n        switch (newSourceSpec.source) {\n            case DataSourceEnum.UPLOADED:\n                return uploadedDataSource.loadData({\n                    spec: newSourceSpec,\n                    selection: newSelection,\n                });\n            case DataSourceEnum.GEDCOM_URL:\n                return gedcomUrlDataSource.loadData({\n                    spec: newSourceSpec,\n                    selection: newSelection,\n                });\n            case DataSourceEnum.EMBEDDED:\n                return embeddedDataSource.loadData({\n                    spec: newSourceSpec,\n                    selection: newSelection,\n                });\n        }\n    }\n\n    useEffect(() => {\n        const rootElement = document.getElementById('root');\n        if (location.pathname === '/') {\n            // @ts-ignore\n            rootElement.classList.add('bgLogo');\n        } else {\n            // @ts-ignore\n            rootElement.classList.remove('bgLogo');\n        }\n\n        (async () => {\n            if (location.pathname !== '/view') {\n                if (state !== AppState.INITIAL) {\n                    setState(AppState.INITIAL);\n                }\n                return;\n            }\n\n            const args = getArguments(location);\n            if (!args.sourceSpec) {\n                history.replace({pathname: '/'});\n                return;\n            }\n\n            if (\n                state === AppState.INITIAL || isNewData(args.sourceSpec, args.selection)\n            ) {\n                // Set loading state.\n                setState(AppState.LOADING);\n                // Set state from URL parameters.\n                setSourceSpec(args.sourceSpec);\n                setSelection(args.selection);\n                setStandalone(args.standalone);\n                setChartType(args.chartType);\n                setFreezeAnimation(args.freezeAnimation);\n                setConfig(args.config);\n                try {\n                    const data = await loadData(args.sourceSpec, args.selection);\n                    // Set state with data.\n                    setData(data);\n                    toggleDetails(args.config, data);\n                    setShowSidePanel(args.showSidePanel);\n                    setState(AppState.SHOWING_CHART);\n                } catch (error: any) {\n                    setErrorMessage(getI18nMessage(error, intl));\n                }\n            } else if (\n                state === AppState.SHOWING_CHART || state === AppState.LOADING_MORE\n            ) {\n                // Update selection if it has changed in the URL.\n                setChartType(args.chartType);\n                setState(AppState.SHOWING_CHART);\n                updateDisplay(args.selection!);\n            }\n        })();\n    });\n\n    function updateUrl(args: queryString.ParsedQuery<any>) {\n        const search = queryString.parse(location.search);\n        for (const key in args) {\n            search[key] = args[key];\n        }\n        location.search = queryString.stringify(search);\n        history.push(location);\n    }\n\n    /**\n     * Called when the user clicks an individual box in the chart. Updates the browser URL.\n     */\n    function onSelection(selection: IndiInfo) {\n        updateUrl({\n            indi: selection.id,\n            gen: selection.generation,\n        });\n    }\n\n    function displayErrorPopup(message: string) {\n        setShowErrorPopup(true);\n        setError(message);\n    }\n\n    async function onDownloadPdf() {\n        try {\n            await downloadPdf();\n        } catch (e) {\n            displayErrorPopup(\n                intl.formatMessage({\n                    id: 'error.failed_pdf',\n                    defaultMessage:\n                        'Failed to generate PDF file.' +\n                        ' Please try with a smaller diagram or download an SVG file.',\n                }),\n            );\n        }\n    }\n\n    async function onDownloadPng() {\n        try {\n            await downloadPng();\n        } catch (e) {\n            displayErrorPopup(\n                intl.formatMessage({\n                    id: 'error.failed_png',\n                    defaultMessage:'Failed to generate PNG file. Please try with a smaller diagram or download an SVG file.'\n                }),\n            );\n        }\n    }\n\n    function onDownloadSvg() {\n        downloadSvg();\n    }\n\n    function onCenterView() {\n        const startIndi: IndiInfo = {\n            id: data?.chartData?.indis?.[0]?.id || 'I0',\n            generation: 0,\n        };\n        onSelection(startIndi)\n    }\n\n    function onDismissErrorPopup() {\n        setShowErrorPopup(false);\n    }\n\n    function renderMainArea() {\n        switch (state) {\n            case AppState.SHOWING_CHART:\n            case AppState.LOADING_MORE:\n                const updatedSelection = getSelection(data!.chartData, selection);\n                const sidePanelTabs = [\n                    {\n                        menuItem: intl.formatMessage({\n                            id: 'tab.info',\n                            defaultMessage: 'Info',\n                        }),\n                        render: () => (\n                            <Details gedcom={data!.gedcom} indi={updatedSelection.id}/>\n                        ),\n                    },\n                    {\n                        menuItem: intl.formatMessage({\n                            id: 'tab.settings',\n                            defaultMessage: 'Settings',\n                        }),\n                        render: () => (\n                            <ConfigPanel\n                                config={config}\n                                onChange={(config) => {\n                                    setConfig(config);\n                                    toggleDetails(config, data);\n                                    updateUrl(configToArgs(config));\n                                }}\n                            />\n                        ),\n                    },\n                ];\n                return (\n                    <div id=\"content\">\n                        <ErrorPopup\n                            open={showErrorPopup}\n                            message={error}\n                            onDismiss={onDismissErrorPopup}\n                        />\n                        {state === AppState.LOADING_MORE ? (\n                            <Loader active size=\"small\" className=\"loading-more\"/>\n                        ) : null}\n                        <Chart\n                            data={data!.chartData}\n                            selection={updatedSelection}\n                            chartType={chartType}\n                            onSelection={onSelection}\n                            freezeAnimation={freezeAnimation}\n                            colors={config.color}\n                            hideIds={config.id}\n                            hideSex={config.sex}\n                        />\n                        {showSidePanel ? (\n                            <Media greaterThanOrEqual=\"large\" className=\"sidePanel\">\n                                <Tab panes={sidePanelTabs}/>\n                            </Media>\n                        ) : null}\n                    </div>\n                );\n            case AppState.ERROR:\n                return <ErrorMessage message={error!}/>;\n            case AppState.INITIAL:\n            case AppState.LOADING:\n                return <Loader active size=\"large\"/>;\n        }\n    }\n\n    return (\n        <>\n            <Route\n                render={() => (\n                    <TopBar\n                        data={data?.chartData}\n                        showingChart={\n                            history.location.pathname === '/view' &&\n                            (state === AppState.SHOWING_CHART || state === AppState.LOADING_MORE)\n                        }\n                        standalone={standalone}\n                        eventHandlers={{\n                            onSelection,\n                            onDownloadPdf,\n                            onDownloadPng,\n                            onDownloadSvg,\n                            onCenterView,\n                        }}\n                    />\n                )}\n            />\n            {staticUrl ? (\n                <Switch>\n                    <Route exact path=\"/view\" render={renderMainArea}/>\n                    <Redirect to={'/view'}/>\n                </Switch>\n            ) : (\n                <Switch>\n                    <Route exact path=\"/view\" render={renderMainArea}/>\n                    <Redirect to={'/'}/>\n                </Switch>\n            )}\n        </>\n    );\n}\n\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport messages_de from './translations/de.json';\nimport messages_fr from './translations/fr.json';\nimport messages_it from './translations/it.json';\nimport messages_es from './translations/es.json';\nimport messages_pl from './translations/pl.json';\nimport {App} from './app';\nimport {detect} from 'detect-browser';\nimport {HashRouter as Router, Route} from 'react-router-dom';\nimport {IntlProvider} from 'react-intl';\nimport {MediaContextProvider, mediaStyles} from './util/media';\nimport './index.css';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'canvas-toBlob';\n\nconst messages = {\n    de: messages_de,\n    fr: messages_fr,\n    it: messages_it,\n    es: messages_es,\n    pl: messages_pl\n};\nconst language = navigator.language && navigator.language.split(/[-_]/)[0];\nconst browser = detect();\n\nif (browser && browser.name === 'ie') {\n    ReactDOM.render(\n        <p>Genealogy Viewer does not support Internet Explorer. Please try a different (modern) browser.</p>,\n        document.querySelector('#root'),\n    );\n} else {\n    ReactDOM.render(\n        <IntlProvider locale={language} messages={messages[language]}>\n            <MediaContextProvider>\n                <style>{mediaStyles}</style>\n                <Router>\n                    <Route component={App}/>\n                </Router>\n            </MediaContextProvider>\n        </IntlProvider>,\n        document.querySelector('#root'),\n    );\n}\n","import {Date as TopolaDate, DateOrRange, DateRange, getDate} from 'topola';\nimport {IntlShape} from 'react-intl';\n\nconst DATE_QUALIFIERS = new Map([\n    ['abt', 'about'],\n    ['cal', 'calculated'],\n    ['est', 'estimated'],\n]);\n\nfunction formatDate(date: TopolaDate, intl: IntlShape) {\n    const hasDay = date.day !== undefined;\n    const hasMonth = date.month !== undefined;\n    const hasYear = date.year !== undefined;\n    if (!hasDay && !hasMonth && !hasYear) {\n        return date.text || '';\n    }\n    const dateObject = toDateObject(date);\n    const translatedQualifier = formatDateQualifier(date.qualifier, intl);\n\n    const formatOptions: Intl.DateTimeFormatOptions = {\n        day: hasDay ? 'numeric' : undefined,\n        month: hasMonth ? 'long' : undefined,\n        year: hasYear ? 'numeric' : undefined,\n    };\n    const translatedDate = new Intl.DateTimeFormat(\n        intl.locale,\n        formatOptions,\n    ).format(dateObject);\n\n    return [translatedQualifier, translatedDate]\n        .filter((dateElement) => dateElement)\n        .join(' ');\n}\n\nfunction formatDateRage(dateRange: DateRange, intl: IntlShape) {\n    const fromDate = dateRange.from;\n    const toDate = dateRange.to;\n    const translatedFromDate = fromDate && formatDate(fromDate, intl);\n    const translatedToDate = toDate && formatDate(toDate, intl);\n    if (translatedFromDate && translatedToDate) {\n        return intl.formatMessage(\n            {\n                id: 'date.between',\n                defaultMessage: 'between {from} and {to}',\n            },\n            {from: translatedFromDate, to: translatedToDate},\n        );\n    }\n    if (translatedFromDate) {\n        return intl.formatMessage(\n            {\n                id: 'date.after',\n                defaultMessage: 'after {from}',\n            },\n            {from: translatedFromDate},\n        );\n    }\n    if (translatedToDate) {\n        return intl.formatMessage(\n            {\n                id: 'date.before',\n                defaultMessage: 'before {to}',\n            },\n            {to: translatedToDate},\n        );\n    }\n    return '';\n}\n\nexport function formatDateQualifier(\n    qualifier: string | undefined,\n    intl: IntlShape,\n): string {\n    const lowerCaseQualifier = qualifier && qualifier.toLowerCase();\n    return (\n        (lowerCaseQualifier &&\n            intl.formatMessage({\n                id: `date.${lowerCaseQualifier}`,\n                defaultMessage:\n                    DATE_QUALIFIERS.get(lowerCaseQualifier) || lowerCaseQualifier,\n            })) ||\n        ''\n    );\n}\n\n/** Formats a DateOrRange object. */\nexport function formatDateOrRange(\n    dateOrRange: DateOrRange | undefined,\n    intl: IntlShape,\n): string {\n    if (!dateOrRange) {\n        return '';\n    }\n    if (dateOrRange.date) {\n        return formatDate(dateOrRange.date, intl);\n    }\n    if (dateOrRange.dateRange) {\n        return formatDateRage(dateOrRange.dateRange, intl);\n    }\n    return '';\n}\n\n/** Formats a date given in GEDCOM format. */\nexport function translateDate(gedcomDate: string, intl: IntlShape): string {\n    return formatDateOrRange(getDate(gedcomDate), intl);\n}\n\nexport function compareTopolaDates(\n    date1: TopolaDate | undefined,\n    date2: TopolaDate | undefined,\n): number {\n    if (!date1 || !date1.year || !date2 || !date2.year) {\n        return 0;\n    }\n    if (date1.year !== date2.year) {\n        return date1.year - date2.year;\n    }\n    if (!date1.month || !date2.month) {\n        return 0;\n    }\n    if (date1.month !== date2.month) {\n        return date1.month - date2.month;\n    }\n    if (date1.day && date2.day && date1.day !== date2.day) {\n        return date1.month - date2.month;\n    }\n    return 0;\n}\n\n/** Compares a dates given in GEDCOM format. */\nexport function compareDates(\n    firstDateOrRange: DateOrRange | undefined,\n    secondDateOrRange: DateOrRange | undefined,\n): number {\n    const date1 =\n        firstDateOrRange &&\n        (firstDateOrRange.date ||\n            (firstDateOrRange.dateRange &&\n                (firstDateOrRange.dateRange.from || firstDateOrRange.dateRange.to)));\n    const date2 =\n        secondDateOrRange &&\n        (secondDateOrRange.date ||\n            (secondDateOrRange.dateRange &&\n                (secondDateOrRange.dateRange.from || secondDateOrRange.dateRange.to)));\n    return compareTopolaDates(date1, date2);\n}\n\nexport function areDateRangesOverlapped(\n    range1: DateRange,\n    range2: DateRange,\n): boolean {\n    return (\n        compareTopolaDates(range1.from, range2.to) <= 0 &&\n        compareTopolaDates(range1.to, range2.from) >= 0\n    );\n}\n\nexport function isValidDateOrRange(\n    dateOrRange: DateOrRange | undefined,\n): boolean {\n    // invalid when range is closed and start is before end\n    if (isDateRangeClosed(dateOrRange?.dateRange)) {\n        return (\n            compareTopolaDates(\n                dateOrRange?.dateRange?.from,\n                dateOrRange?.dateRange?.to,\n            ) <= 0\n        );\n    }\n    //valid when there is exact date or date range has start or end defined\n    return !!(\n        dateOrRange?.date ||\n        dateOrRange?.dateRange?.from ||\n        dateOrRange?.dateRange?.to\n    );\n}\n\nexport function isDateRangeClosed(range: DateRange | undefined): boolean {\n    return !!(range?.from && range?.to);\n}\n\nexport function toDateObject(date: TopolaDate): Date {\n    return new Date(\n        date.year !== undefined ? date.year! : 0,\n        date.month !== undefined ? date.month! - 1 : 0,\n        date.day !== undefined ? date.day! : 1,\n    );\n}\n","import {convertGedcom, TopolaData} from '../util/gedcom_util';\nimport {DataSource, DataSourceEnum, SourceSelection} from './data_source';\nimport {IndiInfo, JsonGedcomData} from 'topola';\nimport {TopolaError} from '../util/error';\nimport AdmZip from 'adm-zip';\n\n/**\n * Returns a valid IndiInfo object, either with the given indi and generation\n * or with an individual taken from the data and generation 0.\n */\nexport function getSelection(\n    data: JsonGedcomData,\n    selection?: IndiInfo,\n): IndiInfo {\n    // If ID is not given, or it doesn't exist in the data, use the first ID in the data.\n    const id =\n        selection && data.indis.some((i) => i.id === selection.id)\n            ? selection.id\n            : data.indis[0].id;\n    return {id, generation: selection?.generation || 0};\n}\n\nfunction prepareData(\n    gedcom: string,\n    cacheId: string,\n    images?: Map<string, string>,\n): TopolaData {\n    const data = convertGedcom(gedcom, images || new Map());\n    const serializedData = JSON.stringify(data);\n    try {\n        sessionStorage.setItem(cacheId, serializedData);\n    } catch (e) {\n        console.warn('Failed to store data in session storage: ' + e);\n    }\n    return data;\n}\n\nasync function loadGedzip(\n    blob: Blob,\n): Promise<{ gedcom: string; images: Map<string, string> }> {\n    const zip = new AdmZip(Buffer.from(await blob.arrayBuffer()));\n    const entries = zip.getEntries();\n    let gedcom = undefined;\n    const images = new Map<string, string>();\n    for (const entry of entries) {\n        if (entry.entryName.endsWith('.ged')) {\n            if (gedcom) {\n                console.warn('Multiple GEDCOM files found in zip archive.');\n            } else {\n                gedcom = entry.getData().toString();\n            }\n        } else {\n            // Save image for later.\n            images.set(\n                entry.entryName,\n                URL.createObjectURL(new Blob([entry.getData()])),\n            );\n        }\n    }\n    if (!gedcom) {\n        throw new Error('GEDCOM file not found in zip archive.');\n    }\n    return {gedcom, images};\n}\n\nexport async function loadFile(blob: Blob): Promise<{ gedcom: string; images: Map<string, string> }> {\n    const fileHeader = await blob.slice(0, 2).text();\n    if (fileHeader === 'PK') {\n        return loadGedzip(blob);\n    }\n    return {gedcom: await blob.text(), images: new Map()};\n}\n\n/** Fetches data from the given URL. Uses cors-anywhere if handleCors is true. */\nexport async function loadFromUrl(\n    url: string,\n    handleCors: boolean,\n): Promise<TopolaData> {\n    try {\n        const cachedData = sessionStorage.getItem(url);\n        if (cachedData) {\n            return JSON.parse(cachedData);\n        }\n    } catch (e) {\n        console.warn('Failed to load data from session storage: ' + e);\n    }\n    const driveUrlMatch1 = url.match(/https:\\/\\/drive\\.google\\.com\\/file\\/d\\/(.*)\\/.*/);\n    if (driveUrlMatch1) {\n        url = `https://drive.google.com/uc?id=${driveUrlMatch1[1]}&export=download`;\n    }\n    const driveUrlMatch2 = url.match(/https:\\/\\/drive\\.google\\.com\\/open\\?id=([^&]*)&?.*/);\n    if (driveUrlMatch2) {\n        url = `https://drive.google.com/uc?id=${driveUrlMatch2[1]}&export=download`;\n    }\n    const urlToFetch = handleCors ? 'https://topolaproxy.bieda.it/' + url : url;\n    const response = await window.fetch(urlToFetch);\n    if (response.status !== 200) {\n        throw new Error(response.statusText);\n    }\n    const {gedcom, images} = await loadFile(await response.blob());\n    return prepareData(gedcom, url, images);\n}\n\n/** Loads data from the given GEDCOM file contents. */\nexport async function loadGedcom(\n    hash: string,\n    gedcom?: string,\n    images?: Map<string, string>,\n): Promise<TopolaData> {\n    try {\n        const cachedData = sessionStorage.getItem(hash);\n        if (cachedData) {\n            return JSON.parse(cachedData);\n        }\n    } catch (e) {\n        console.warn('Failed to load data from session storage: ' + e);\n    }\n    if (!gedcom) {\n        throw new TopolaError(\n            'ERROR_LOADING_UPLOADED_FILE',\n            'Error loading data. Please upload your file again.',\n        );\n    }\n    return prepareData(gedcom, hash, images);\n}\n\nexport interface UploadSourceSpec {\n    source: DataSourceEnum.UPLOADED;\n    gedcom?: string;\n    /** Hash of the GEDCOM contents. */\n    hash: string;\n    images?: Map<string, string>;\n}\n\n/** Files opened from the local computer. */\nexport class UploadedDataSource implements DataSource<UploadSourceSpec> {\n    // isNewData(args: Arguments, state: State): boolean {\n    isNewData(\n        newSource: SourceSelection<UploadSourceSpec>,\n        oldSource: SourceSelection<UploadSourceSpec>,\n        data?: TopolaData,\n    ): boolean {\n        return newSource.spec.hash !== oldSource.spec.hash;\n    }\n\n    async loadData(\n        source: SourceSelection<UploadSourceSpec>,\n    ): Promise<TopolaData> {\n        try {\n            return await loadGedcom(\n                source.spec.hash,\n                source.spec.gedcom,\n                source.spec.images,\n            );\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n\nexport interface UrlSourceSpec {\n    source: DataSourceEnum.GEDCOM_URL;\n    /** URL of the data that is loaded or is being loaded. */\n    url: string;\n    handleCors: boolean;\n}\n\n/** GEDCOM file loaded by pointing to a URL. */\nexport class GedcomUrlDataSource implements DataSource<UrlSourceSpec> {\n    isNewData(\n        newSource: SourceSelection<UrlSourceSpec>,\n        oldSource: SourceSelection<UrlSourceSpec>,\n        data?: TopolaData,\n    ): boolean {\n        return newSource.spec.url !== oldSource.spec.url;\n    }\n    async loadData(source: SourceSelection<UrlSourceSpec>): Promise<TopolaData> {\n        try {\n            return await loadFromUrl(source.spec.url, source.spec.handleCors);\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n"],"sourceRoot":""}